{
  "address": "0x2aa4c97688f340C8A2bDE2016b16dEFDC259834D",
  "abi": [
    {
      "inputs": [],
      "name": "EC_SCALAR_MUL_FAILURE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MOD_EXP_FAILURE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PROOF_FAILURE",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "PUBLIC_INPUT_COUNT_INVALID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PUBLIC_INPUT_GE_P",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PUBLIC_INPUT_INVALID_BN128_G1_POINT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "getVerificationKeyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[]",
          "name": "_publicInputs",
          "type": "bytes32[]"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x09eb7f7c8445b63dbd71b9fdef2d5ea5894f0c2f0f1cade0af10699f947b0615",
  "receipt": {
    "to": null,
    "from": "0xDb1d125C9f7faE45d7CeE470d048670a85270f4D",
    "contractAddress": "0x2aa4c97688f340C8A2bDE2016b16dEFDC259834D",
    "transactionIndex": 0,
    "gasUsed": "4420131",
    "logsBloom": "0x
    "blockHash": "0x15159a88f5c71bd604319b02c6ff336e93b182638f780e7ed323f9855bb99bf5",
    "transactionHash": "0x09eb7f7c8445b63dbd71b9fdef2d5ea5894f0c2f0f1cade0af10699f947b0615",
    "logs": [],
    "blockNumber": 29377782,
    "cumulativeGasUsed": "4420131",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "062487c89d22dfe05cd603ee529a8f78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EC_SCALAR_MUL_FAILURE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MOD_EXP_FAILURE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PROOF_FAILURE\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"PUBLIC_INPUT_COUNT_INVALID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PUBLIC_INPUT_GE_P\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PUBLIC_INPUT_INVALID_BN128_G1_POINT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"getVerificationKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"_publicInputs\",\"type\":\"bytes32[]\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verify(bytes,bytes32[])\":{\"params\":{\"_proof\":\"- The serialized proof\",\"_publicInputs\":\"- An array of the public inputs\"},\"returns\":{\"_0\":\"True if proof is valid, reverts otherwise\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"verify(bytes,bytes32[])\":{\"notice\":\"Verify a Ultra Plonk proof\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifier/RecoveryVerifier.sol\":\"RecoveryUltraVerifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"u\",\"stackAllocation\":true}},\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/verifier/RecoveryVerifier.sol\":{\"content\":\"// Verification Key Hash: 61ae6655f2e50138265be765837827073a92778ab97975e7b5a750c4ab5f92f5\\n// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2022 Aztec\\npragma solidity >=0.8.4;\\n\\nlibrary RecoveryUltraVerificationKey {\\n    function verificationKeyHash() internal pure returns(bytes32) {\\n        return 0x61ae6655f2e50138265be765837827073a92778ab97975e7b5a750c4ab5f92f5;\\n    }\\n\\n    function loadVerificationKey(uint256 _vk, uint256 _omegaInverseLoc) internal pure {\\n        assembly {\\n            mstore(add(_vk, 0x00), 0x0000000000000000000000000000000000000000000000000000000000020000) // vk.circuit_size\\n            mstore(add(_vk, 0x20), 0x0000000000000000000000000000000000000000000000000000000000000040) // vk.num_inputs\\n            mstore(add(_vk, 0x40), 0x1bf82deba7d74902c3708cc6e70e61f30512eca95655210e276e5858ce8f58e5) // vk.work_root\\n            mstore(add(_vk, 0x60), 0x30643640b9f82f90e83b698e5ea6179c7c05542e859533b48b9953a2f5360801) // vk.domain_inverse\\n            mstore(add(_vk, 0x80), 0x11a06db1f9651b27c9ec8477d003e63995dd692c8440e37c3aac27f7bbed831e) // vk.Q1.x\\n            mstore(add(_vk, 0xa0), 0x199ab55229fd67b165fa96b66ffce82544d6d622918b3d4c12b5e2d73326fb47) // vk.Q1.y\\n            mstore(add(_vk, 0xc0), 0x19679148326451008c148a76ca6f7ce6c667c7f962dda54d819bcca9322e04f6) // vk.Q2.x\\n            mstore(add(_vk, 0xe0), 0x2fe66d1e0c5f75a1937cfc9a520cc0bdce8896552d9c6c34c486c2b424ec3d5a) // vk.Q2.y\\n            mstore(add(_vk, 0x100), 0x29d0e9bfa98e63b45584d0cffa8f0517de5a9ef41f84e6409b736d175ebda26e) // vk.Q3.x\\n            mstore(add(_vk, 0x120), 0x02819a328e04821f79c809f69321ef159c1a80ba11faefcdc44de310c5b53d73) // vk.Q3.y\\n            mstore(add(_vk, 0x140), 0x1ee1aca00ee3986135cf4f138abdf795ee9478e14b293881fd00538d93240287) // vk.Q4.x\\n            mstore(add(_vk, 0x160), 0x1c011130ca8fb7a4015013f5aa9eb597089b039cfc07ce5d3ed8c99eba25dd2b) // vk.Q4.y\\n            mstore(add(_vk, 0x180), 0x073ea16b4a029df9a7fa50e1c5809c874d488e1a269b73041065426e0a56e27c) // vk.Q_M.x\\n            mstore(add(_vk, 0x1a0), 0x20fa39daf8432776c3b9158c80a6f00046363992bc755e5ac857e448c067c937) // vk.Q_M.y\\n            mstore(add(_vk, 0x1c0), 0x23f8a275449b7aed2e35a468befb286c4985e28a6e39185c89a903fbacb32bee) // vk.Q_C.x\\n            mstore(add(_vk, 0x1e0), 0x0acfd1e58d4571c6b53fdbb5a9cd3e3281a59e675a7068225faf5ab699c73008) // vk.Q_C.y\\n            mstore(add(_vk, 0x200), 0x0696ef8a97c6e8cde6b8388508cae7dc93bef9931e72a1f22318ca7ee2c724ef) // vk.Q_ARITHMETIC.x\\n            mstore(add(_vk, 0x220), 0x147a0bd701f6582d2264c54211c3df7aea10651461f1244a46d3a05c96bb4ed7) // vk.Q_ARITHMETIC.y\\n            mstore(add(_vk, 0x240), 0x2abf3b91d66b8ba761c762026373745ddc8f86ae640a398d1fc1f47f91c4c19f) // vk.QSORT.x\\n            mstore(add(_vk, 0x260), 0x061faf6b978eedad57a6fc5f0842244877f87e38664d4186c76eebceacb00862) // vk.QSORT.y\\n            mstore(add(_vk, 0x280), 0x28b955aac4c043cbcfde06eee59b44363f96fe0a6fa93b0b36ef07fbe285d4c7) // vk.Q_ELLIPTIC.x\\n            mstore(add(_vk, 0x2a0), 0x16e1bbb0a7728dcb7696fdf3361b39510c6a4f83cc2159f5fc65ceb2be0599f9) // vk.Q_ELLIPTIC.y\\n            mstore(add(_vk, 0x2c0), 0x0243b4589c2417479b90bd1513b8334d928e337833d2440ae0e33c8046fbc20b) // vk.Q_AUX.x\\n            mstore(add(_vk, 0x2e0), 0x2bcedf3290cc533a848eda60cab41837358c6cc467eb1132947446727de8ea50) // vk.Q_AUX.y\\n            mstore(add(_vk, 0x300), 0x01315729d4ef845156a2a05c19b7ca3b0cb9393f04b75f53f6f8ed9da117efae) // vk.SIGMA1.x\\n            mstore(add(_vk, 0x320), 0x0bb1f455c4b306104e3fa85b1f99cf3b3c89ddc509251b5d73a09dfafbcbe923) // vk.SIGMA1.y\\n            mstore(add(_vk, 0x340), 0x16d30d4871d67d6d1691697ee4bf5163479e69eb3317b9d3cd141d7b6e396fd8) // vk.SIGMA2.x\\n            mstore(add(_vk, 0x360), 0x1e40dc32df1c3548ca3f1968a4a6f3af22d1ef794af4428ae6a07ccd33af38d9) // vk.SIGMA2.y\\n            mstore(add(_vk, 0x380), 0x28d46cb783a4780478af313cb6a97664406c65b05e2140749107c4924fab87e4) // vk.SIGMA3.x\\n            mstore(add(_vk, 0x3a0), 0x0dbc767ab85eb4ef258fe775f8d7a23cc360c32d98a3e2929899d81cab3de59b) // vk.SIGMA3.y\\n            mstore(add(_vk, 0x3c0), 0x1d433e1679a4d522726efddd43d10702cff6552ca86190e388aba49fd8c9f6b0) // vk.SIGMA4.x\\n            mstore(add(_vk, 0x3e0), 0x1ca746e44e47dffd1ab81612fe4d258adb4245370d3dfc8604b43a1a7e462167) // vk.SIGMA4.y\\n            mstore(add(_vk, 0x400), 0x20f0757218768b5acdffdc0cd203936c9ff62eb1319511b0e8517b8728f40664) // vk.TABLE1.x\\n            mstore(add(_vk, 0x420), 0x0f0eff8d32706825d3f125854cecd4874c4979bfbdc79f82605d0fa199854c69) // vk.TABLE1.y\\n            mstore(add(_vk, 0x440), 0x0562db677eb1b28ce15e8f2f3da3da5b42969b732ca71bdd97f771708ccedc75) // vk.TABLE2.x\\n            mstore(add(_vk, 0x460), 0x009ecd8c355ea6ee1c5749183b60868848816a5ad2fc8b7593163803618d7d2a) // vk.TABLE2.y\\n            mstore(add(_vk, 0x480), 0x0937d5511e252f19eb13e7c3c3b15dbafcf47c051e50d1487a6ce598c4c42cf3) // vk.TABLE3.x\\n            mstore(add(_vk, 0x4a0), 0x2a6ce94411986de39be569b0befd25d5f8cc71de8db99eec3f45c84080279e84) // vk.TABLE3.y\\n            mstore(add(_vk, 0x4c0), 0x06b069940471a92490111d63729f8577c997b0ac53270624e217c5e3d6194e1a) // vk.TABLE4.x\\n            mstore(add(_vk, 0x4e0), 0x28d1df45294affc859f026077d3b4ec84b3c5c947c6b8a141224dcabd702104c) // vk.TABLE4.y\\n            mstore(add(_vk, 0x500), 0x2906d8db4838fd01c48610545ef04a674efcbaa549d32b4cd2a45c7d93fa8423) // vk.TABLE_TYPE.x\\n            mstore(add(_vk, 0x520), 0x1bf3ed7756692f717393e0de71f9b12e868bb3b907f6c9ece4a05df5db593681) // vk.TABLE_TYPE.y\\n            mstore(add(_vk, 0x540), 0x2d8564591de291d1d32fe0e6a34130f7f179fe4eb3606667cb56153b0216280d) // vk.ID1.x\\n            mstore(add(_vk, 0x560), 0x17a9752549051f79cbe5ee6dd69def422a66653466f1fd058219ae1799e2a3a9) // vk.ID1.y\\n            mstore(add(_vk, 0x580), 0x0514188ebade6414bb9096b5180927a13a5d5c7ebf654b91838ef759e8506d19) // vk.ID2.x\\n            mstore(add(_vk, 0x5a0), 0x2f427ca72d93c9d3418f7d12410ab240010e9482509b8f1f77447da73924e4f8) // vk.ID2.y\\n            mstore(add(_vk, 0x5c0), 0x2e5fe2d13129f75a27ec02a05f80f70baecd7ebd271673e7e171e85cce90dd9c) // vk.ID3.x\\n            mstore(add(_vk, 0x5e0), 0x121e8123abf09c1b5aefb1ac2b964a8a35ae5792643b92fedf217d9e4afcd06a) // vk.ID3.y\\n            mstore(add(_vk, 0x600), 0x01fe4f915a2c4ba308b274ac4ed4306e9f23fddbcef43c1ee03a4a5da0f7122e) // vk.ID4.x\\n            mstore(add(_vk, 0x620), 0x188a0d89a00436a83211acab2298dcb673dc8640e4db3bb7325ff282009fa138) // vk.ID4.y\\n            mstore(add(_vk, 0x640), 0x00) // vk.contains_recursive_proof\\n            mstore(add(_vk, 0x660), 0) // vk.recursive_proof_public_input_indices\\n            mstore(add(_vk, 0x680), 0x260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c1) // vk.g2_x.X.c1 \\n            mstore(add(_vk, 0x6a0), 0x0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b0) // vk.g2_x.X.c0 \\n            mstore(add(_vk, 0x6c0), 0x04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe4) // vk.g2_x.Y.c1 \\n            mstore(add(_vk, 0x6e0), 0x22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e55) // vk.g2_x.Y.c0 \\n            mstore(_omegaInverseLoc, 0x244cf010c43ca87237d8b00bf9dd50c4c01c7f086bd4e8c920e75251d96f0d22) // vk.work_root_inverse\\n        }\\n    }\\n}\\n/**\\n * @title Ultra Plonk proof verification contract\\n * @dev Top level Plonk proof verification contract, which allows Plonk proof to be verified\\n */\\nabstract contract RecoveryBaseUltraVerifier {\\n    // VERIFICATION KEY MEMORY LOCATIONS\\n    uint256 internal constant N_LOC = 0x380;\\n    uint256 internal constant NUM_INPUTS_LOC = 0x3a0;\\n    uint256 internal constant OMEGA_LOC = 0x3c0;\\n    uint256 internal constant DOMAIN_INVERSE_LOC = 0x3e0;\\n    uint256 internal constant Q1_X_LOC = 0x400;\\n    uint256 internal constant Q1_Y_LOC = 0x420;\\n    uint256 internal constant Q2_X_LOC = 0x440;\\n    uint256 internal constant Q2_Y_LOC = 0x460;\\n    uint256 internal constant Q3_X_LOC = 0x480;\\n    uint256 internal constant Q3_Y_LOC = 0x4a0;\\n    uint256 internal constant Q4_X_LOC = 0x4c0;\\n    uint256 internal constant Q4_Y_LOC = 0x4e0;\\n    uint256 internal constant QM_X_LOC = 0x500;\\n    uint256 internal constant QM_Y_LOC = 0x520;\\n    uint256 internal constant QC_X_LOC = 0x540;\\n    uint256 internal constant QC_Y_LOC = 0x560;\\n    uint256 internal constant QARITH_X_LOC = 0x580;\\n    uint256 internal constant QARITH_Y_LOC = 0x5a0;\\n    uint256 internal constant QSORT_X_LOC = 0x5c0;\\n    uint256 internal constant QSORT_Y_LOC = 0x5e0;\\n    uint256 internal constant QELLIPTIC_X_LOC = 0x600;\\n    uint256 internal constant QELLIPTIC_Y_LOC = 0x620;\\n    uint256 internal constant QAUX_X_LOC = 0x640;\\n    uint256 internal constant QAUX_Y_LOC = 0x660;\\n    uint256 internal constant SIGMA1_X_LOC = 0x680;\\n    uint256 internal constant SIGMA1_Y_LOC = 0x6a0;\\n    uint256 internal constant SIGMA2_X_LOC = 0x6c0;\\n    uint256 internal constant SIGMA2_Y_LOC = 0x6e0;\\n    uint256 internal constant SIGMA3_X_LOC = 0x700;\\n    uint256 internal constant SIGMA3_Y_LOC = 0x720;\\n    uint256 internal constant SIGMA4_X_LOC = 0x740;\\n    uint256 internal constant SIGMA4_Y_LOC = 0x760;\\n    uint256 internal constant TABLE1_X_LOC = 0x780;\\n    uint256 internal constant TABLE1_Y_LOC = 0x7a0;\\n    uint256 internal constant TABLE2_X_LOC = 0x7c0;\\n    uint256 internal constant TABLE2_Y_LOC = 0x7e0;\\n    uint256 internal constant TABLE3_X_LOC = 0x800;\\n    uint256 internal constant TABLE3_Y_LOC = 0x820;\\n    uint256 internal constant TABLE4_X_LOC = 0x840;\\n    uint256 internal constant TABLE4_Y_LOC = 0x860;\\n    uint256 internal constant TABLE_TYPE_X_LOC = 0x880;\\n    uint256 internal constant TABLE_TYPE_Y_LOC = 0x8a0;\\n    uint256 internal constant ID1_X_LOC = 0x8c0;\\n    uint256 internal constant ID1_Y_LOC = 0x8e0;\\n    uint256 internal constant ID2_X_LOC = 0x900;\\n    uint256 internal constant ID2_Y_LOC = 0x920;\\n    uint256 internal constant ID3_X_LOC = 0x940;\\n    uint256 internal constant ID3_Y_LOC = 0x960;\\n    uint256 internal constant ID4_X_LOC = 0x980;\\n    uint256 internal constant ID4_Y_LOC = 0x9a0;\\n    uint256 internal constant CONTAINS_RECURSIVE_PROOF_LOC = 0x9c0;\\n    uint256 internal constant RECURSIVE_PROOF_PUBLIC_INPUT_INDICES_LOC = 0x9e0;\\n    uint256 internal constant G2X_X0_LOC = 0xa00;\\n    uint256 internal constant G2X_X1_LOC = 0xa20;\\n    uint256 internal constant G2X_Y0_LOC = 0xa40;\\n    uint256 internal constant G2X_Y1_LOC = 0xa60;\\n\\n    // ### PROOF DATA MEMORY LOCATIONS\\n    uint256 internal constant W1_X_LOC = 0x1200;\\n    uint256 internal constant W1_Y_LOC = 0x1220;\\n    uint256 internal constant W2_X_LOC = 0x1240;\\n    uint256 internal constant W2_Y_LOC = 0x1260;\\n    uint256 internal constant W3_X_LOC = 0x1280;\\n    uint256 internal constant W3_Y_LOC = 0x12a0;\\n    uint256 internal constant W4_X_LOC = 0x12c0;\\n    uint256 internal constant W4_Y_LOC = 0x12e0;\\n    uint256 internal constant S_X_LOC = 0x1300;\\n    uint256 internal constant S_Y_LOC = 0x1320;\\n    uint256 internal constant Z_X_LOC = 0x1340;\\n    uint256 internal constant Z_Y_LOC = 0x1360;\\n    uint256 internal constant Z_LOOKUP_X_LOC = 0x1380;\\n    uint256 internal constant Z_LOOKUP_Y_LOC = 0x13a0;\\n    uint256 internal constant T1_X_LOC = 0x13c0;\\n    uint256 internal constant T1_Y_LOC = 0x13e0;\\n    uint256 internal constant T2_X_LOC = 0x1400;\\n    uint256 internal constant T2_Y_LOC = 0x1420;\\n    uint256 internal constant T3_X_LOC = 0x1440;\\n    uint256 internal constant T3_Y_LOC = 0x1460;\\n    uint256 internal constant T4_X_LOC = 0x1480;\\n    uint256 internal constant T4_Y_LOC = 0x14a0;\\n\\n    uint256 internal constant W1_EVAL_LOC = 0x1600;\\n    uint256 internal constant W2_EVAL_LOC = 0x1620;\\n    uint256 internal constant W3_EVAL_LOC = 0x1640;\\n    uint256 internal constant W4_EVAL_LOC = 0x1660;\\n    uint256 internal constant S_EVAL_LOC = 0x1680;\\n    uint256 internal constant Z_EVAL_LOC = 0x16a0;\\n    uint256 internal constant Z_LOOKUP_EVAL_LOC = 0x16c0;\\n    uint256 internal constant Q1_EVAL_LOC = 0x16e0;\\n    uint256 internal constant Q2_EVAL_LOC = 0x1700;\\n    uint256 internal constant Q3_EVAL_LOC = 0x1720;\\n    uint256 internal constant Q4_EVAL_LOC = 0x1740;\\n    uint256 internal constant QM_EVAL_LOC = 0x1760;\\n    uint256 internal constant QC_EVAL_LOC = 0x1780;\\n    uint256 internal constant QARITH_EVAL_LOC = 0x17a0;\\n    uint256 internal constant QSORT_EVAL_LOC = 0x17c0;\\n    uint256 internal constant QELLIPTIC_EVAL_LOC = 0x17e0;\\n    uint256 internal constant QAUX_EVAL_LOC = 0x1800;\\n    uint256 internal constant TABLE1_EVAL_LOC = 0x1840;\\n    uint256 internal constant TABLE2_EVAL_LOC = 0x1860;\\n    uint256 internal constant TABLE3_EVAL_LOC = 0x1880;\\n    uint256 internal constant TABLE4_EVAL_LOC = 0x18a0;\\n    uint256 internal constant TABLE_TYPE_EVAL_LOC = 0x18c0;\\n    uint256 internal constant ID1_EVAL_LOC = 0x18e0;\\n    uint256 internal constant ID2_EVAL_LOC = 0x1900;\\n    uint256 internal constant ID3_EVAL_LOC = 0x1920;\\n    uint256 internal constant ID4_EVAL_LOC = 0x1940;\\n    uint256 internal constant SIGMA1_EVAL_LOC = 0x1960;\\n    uint256 internal constant SIGMA2_EVAL_LOC = 0x1980;\\n    uint256 internal constant SIGMA3_EVAL_LOC = 0x19a0;\\n    uint256 internal constant SIGMA4_EVAL_LOC = 0x19c0;\\n    uint256 internal constant W1_OMEGA_EVAL_LOC = 0x19e0;\\n    uint256 internal constant W2_OMEGA_EVAL_LOC = 0x2000;\\n    uint256 internal constant W3_OMEGA_EVAL_LOC = 0x2020;\\n    uint256 internal constant W4_OMEGA_EVAL_LOC = 0x2040;\\n    uint256 internal constant S_OMEGA_EVAL_LOC = 0x2060;\\n    uint256 internal constant Z_OMEGA_EVAL_LOC = 0x2080;\\n    uint256 internal constant Z_LOOKUP_OMEGA_EVAL_LOC = 0x20a0;\\n    uint256 internal constant TABLE1_OMEGA_EVAL_LOC = 0x20c0;\\n    uint256 internal constant TABLE2_OMEGA_EVAL_LOC = 0x20e0;\\n    uint256 internal constant TABLE3_OMEGA_EVAL_LOC = 0x2100;\\n    uint256 internal constant TABLE4_OMEGA_EVAL_LOC = 0x2120;\\n\\n    uint256 internal constant PI_Z_X_LOC = 0x2300;\\n    uint256 internal constant PI_Z_Y_LOC = 0x2320;\\n    uint256 internal constant PI_Z_OMEGA_X_LOC = 0x2340;\\n    uint256 internal constant PI_Z_OMEGA_Y_LOC = 0x2360;\\n\\n    // Used for elliptic widget. These are alias names for wire + shifted wire evaluations\\n    uint256 internal constant X1_EVAL_LOC = W2_EVAL_LOC;\\n    uint256 internal constant X2_EVAL_LOC = W1_OMEGA_EVAL_LOC;\\n    uint256 internal constant X3_EVAL_LOC = W2_OMEGA_EVAL_LOC;\\n    uint256 internal constant Y1_EVAL_LOC = W3_EVAL_LOC;\\n    uint256 internal constant Y2_EVAL_LOC = W4_OMEGA_EVAL_LOC;\\n    uint256 internal constant Y3_EVAL_LOC = W3_OMEGA_EVAL_LOC;\\n    uint256 internal constant QBETA_LOC = Q3_EVAL_LOC;\\n    uint256 internal constant QBETA_SQR_LOC = Q4_EVAL_LOC;\\n    uint256 internal constant QSIGN_LOC = Q1_EVAL_LOC;\\n\\n    // ### CHALLENGES MEMORY OFFSETS\\n\\n    uint256 internal constant C_BETA_LOC = 0x2600;\\n    uint256 internal constant C_GAMMA_LOC = 0x2620;\\n    uint256 internal constant C_ALPHA_LOC = 0x2640;\\n    uint256 internal constant C_ETA_LOC = 0x2660;\\n    uint256 internal constant C_ETA_SQR_LOC = 0x2680;\\n    uint256 internal constant C_ETA_CUBE_LOC = 0x26a0;\\n\\n    uint256 internal constant C_ZETA_LOC = 0x26c0;\\n    uint256 internal constant C_CURRENT_LOC = 0x26e0;\\n    uint256 internal constant C_V0_LOC = 0x2700;\\n    uint256 internal constant C_V1_LOC = 0x2720;\\n    uint256 internal constant C_V2_LOC = 0x2740;\\n    uint256 internal constant C_V3_LOC = 0x2760;\\n    uint256 internal constant C_V4_LOC = 0x2780;\\n    uint256 internal constant C_V5_LOC = 0x27a0;\\n    uint256 internal constant C_V6_LOC = 0x27c0;\\n    uint256 internal constant C_V7_LOC = 0x27e0;\\n    uint256 internal constant C_V8_LOC = 0x2800;\\n    uint256 internal constant C_V9_LOC = 0x2820;\\n    uint256 internal constant C_V10_LOC = 0x2840;\\n    uint256 internal constant C_V11_LOC = 0x2860;\\n    uint256 internal constant C_V12_LOC = 0x2880;\\n    uint256 internal constant C_V13_LOC = 0x28a0;\\n    uint256 internal constant C_V14_LOC = 0x28c0;\\n    uint256 internal constant C_V15_LOC = 0x28e0;\\n    uint256 internal constant C_V16_LOC = 0x2900;\\n    uint256 internal constant C_V17_LOC = 0x2920;\\n    uint256 internal constant C_V18_LOC = 0x2940;\\n    uint256 internal constant C_V19_LOC = 0x2960;\\n    uint256 internal constant C_V20_LOC = 0x2980;\\n    uint256 internal constant C_V21_LOC = 0x29a0;\\n    uint256 internal constant C_V22_LOC = 0x29c0;\\n    uint256 internal constant C_V23_LOC = 0x29e0;\\n    uint256 internal constant C_V24_LOC = 0x2a00;\\n    uint256 internal constant C_V25_LOC = 0x2a20;\\n    uint256 internal constant C_V26_LOC = 0x2a40;\\n    uint256 internal constant C_V27_LOC = 0x2a60;\\n    uint256 internal constant C_V28_LOC = 0x2a80;\\n    uint256 internal constant C_V29_LOC = 0x2aa0;\\n    uint256 internal constant C_V30_LOC = 0x2ac0;\\n\\n    uint256 internal constant C_U_LOC = 0x2b00;\\n\\n    // ### LOCAL VARIABLES MEMORY OFFSETS\\n    uint256 internal constant DELTA_NUMERATOR_LOC = 0x3000;\\n    uint256 internal constant DELTA_DENOMINATOR_LOC = 0x3020;\\n    uint256 internal constant ZETA_POW_N_LOC = 0x3040;\\n    uint256 internal constant PUBLIC_INPUT_DELTA_LOC = 0x3060;\\n    uint256 internal constant ZERO_POLY_LOC = 0x3080;\\n    uint256 internal constant L_START_LOC = 0x30a0;\\n    uint256 internal constant L_END_LOC = 0x30c0;\\n    uint256 internal constant R_ZERO_EVAL_LOC = 0x30e0;\\n\\n    uint256 internal constant PLOOKUP_DELTA_NUMERATOR_LOC = 0x3100;\\n    uint256 internal constant PLOOKUP_DELTA_DENOMINATOR_LOC = 0x3120;\\n    uint256 internal constant PLOOKUP_DELTA_LOC = 0x3140;\\n\\n    uint256 internal constant ACCUMULATOR_X_LOC = 0x3160;\\n    uint256 internal constant ACCUMULATOR_Y_LOC = 0x3180;\\n    uint256 internal constant ACCUMULATOR2_X_LOC = 0x31a0;\\n    uint256 internal constant ACCUMULATOR2_Y_LOC = 0x31c0;\\n    uint256 internal constant PAIRING_LHS_X_LOC = 0x31e0;\\n    uint256 internal constant PAIRING_LHS_Y_LOC = 0x3200;\\n    uint256 internal constant PAIRING_RHS_X_LOC = 0x3220;\\n    uint256 internal constant PAIRING_RHS_Y_LOC = 0x3240;\\n\\n    // ### SUCCESS FLAG MEMORY LOCATIONS\\n    uint256 internal constant GRAND_PRODUCT_SUCCESS_FLAG = 0x3300;\\n    uint256 internal constant ARITHMETIC_TERM_SUCCESS_FLAG = 0x3020;\\n    uint256 internal constant BATCH_OPENING_SUCCESS_FLAG = 0x3340;\\n    uint256 internal constant OPENING_COMMITMENT_SUCCESS_FLAG = 0x3360;\\n    uint256 internal constant PAIRING_PREAMBLE_SUCCESS_FLAG = 0x3380;\\n    uint256 internal constant PAIRING_SUCCESS_FLAG = 0x33a0;\\n    uint256 internal constant RESULT_FLAG = 0x33c0;\\n\\n    // misc stuff\\n    uint256 internal constant OMEGA_INVERSE_LOC = 0x3400;\\n    uint256 internal constant C_ALPHA_SQR_LOC = 0x3420;\\n    uint256 internal constant C_ALPHA_CUBE_LOC = 0x3440;\\n    uint256 internal constant C_ALPHA_QUAD_LOC = 0x3460;\\n    uint256 internal constant C_ALPHA_BASE_LOC = 0x3480;\\n\\n    // ### RECURSION VARIABLE MEMORY LOCATIONS\\n    uint256 internal constant RECURSIVE_P1_X_LOC = 0x3500;\\n    uint256 internal constant RECURSIVE_P1_Y_LOC = 0x3520;\\n    uint256 internal constant RECURSIVE_P2_X_LOC = 0x3540;\\n    uint256 internal constant RECURSIVE_P2_Y_LOC = 0x3560;\\n\\n    uint256 internal constant PUBLIC_INPUTS_HASH_LOCATION = 0x3580;\\n\\n    // sub-identity storage\\n    uint256 internal constant PERMUTATION_IDENTITY = 0x3600;\\n    uint256 internal constant PLOOKUP_IDENTITY = 0x3620;\\n    uint256 internal constant ARITHMETIC_IDENTITY = 0x3640;\\n    uint256 internal constant SORT_IDENTITY = 0x3660;\\n    uint256 internal constant ELLIPTIC_IDENTITY = 0x3680;\\n    uint256 internal constant AUX_IDENTITY = 0x36a0;\\n    uint256 internal constant AUX_NON_NATIVE_FIELD_EVALUATION = 0x36c0;\\n    uint256 internal constant AUX_LIMB_ACCUMULATOR_EVALUATION = 0x36e0;\\n    uint256 internal constant AUX_RAM_CONSISTENCY_EVALUATION = 0x3700;\\n    uint256 internal constant AUX_ROM_CONSISTENCY_EVALUATION = 0x3720;\\n    uint256 internal constant AUX_MEMORY_EVALUATION = 0x3740;\\n\\n    uint256 internal constant QUOTIENT_EVAL_LOC = 0x3760;\\n    uint256 internal constant ZERO_POLY_INVERSE_LOC = 0x3780;\\n\\n    // when hashing public inputs we use memory at NU_CHALLENGE_INPUT_LOC_A, as the hash input size is unknown at compile time\\n    uint256 internal constant NU_CHALLENGE_INPUT_LOC_A = 0x37a0;\\n    uint256 internal constant NU_CHALLENGE_INPUT_LOC_B = 0x37c0;\\n    uint256 internal constant NU_CHALLENGE_INPUT_LOC_C = 0x37e0;\\n\\n    bytes4 internal constant PUBLIC_INPUT_INVALID_BN128_G1_POINT_SELECTOR = 0xeba9f4a6;\\n    bytes4 internal constant PUBLIC_INPUT_GE_P_SELECTOR = 0x374a972f;\\n    bytes4 internal constant MOD_EXP_FAILURE_SELECTOR = 0xf894a7bc;\\n    bytes4 internal constant EC_SCALAR_MUL_FAILURE_SELECTOR = 0xf755f369;\\n    bytes4 internal constant PROOF_FAILURE_SELECTOR = 0x0711fcec;\\n\\n    uint256 internal constant ETA_INPUT_LENGTH = 0xc0; // W1, W2, W3 = 6 * 0x20 bytes\\n\\n    // We need to hash 41 field elements when generating the NU challenge\\n    // w1, w2, w3, w4, s, z, z_lookup, q1, q2, q3, q4, qm, qc, qarith (14)\\n    // qsort, qelliptic, qaux, sigma1, sigma2, sigma, sigma4, (7)\\n    // table1, table2, table3, table4, tabletype, id1, id2, id3, id4, (9)\\n    // w1_omega, w2_omega, w3_omega, w4_omega, s_omega, z_omega, z_lookup_omega, (7)\\n    // table1_omega, table2_omega, table3_omega, table4_omega (4)\\n    uint256 internal constant NU_INPUT_LENGTH = 0x520; // 0x520 = 41 * 0x20\\n\\n    // There are ELEVEN G1 group elements added into the transcript in the `beta` round, that we need to skip over\\n    // W1, W2, W3, W4, S, Z, Z_LOOKUP, T1, T2, T3, T4\\n    uint256 internal constant NU_CALLDATA_SKIP_LENGTH = 0x2c0; // 11 * 0x40 = 0x2c0\\n\\n    uint256 internal constant NEGATIVE_INVERSE_OF_2_MODULO_P =\\n        0x183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f8000000;\\n    uint256 internal constant LIMB_SIZE = 0x100000000000000000; // 2<<68\\n    uint256 internal constant SUBLIMB_SHIFT = 0x4000; // 2<<14\\n\\n    // y^2 = x^3 + ax + b\\n    // for Grumpkin, a = 0 and b = -17. We use b in a custom gate relation that evaluates elliptic curve arithmetic\\n    uint256 internal constant GRUMPKIN_CURVE_B_PARAMETER_NEGATED = 17;\\n    error PUBLIC_INPUT_COUNT_INVALID(uint256 expected, uint256 actual);\\n    error PUBLIC_INPUT_INVALID_BN128_G1_POINT();\\n    error PUBLIC_INPUT_GE_P();\\n    error MOD_EXP_FAILURE();\\n    error EC_SCALAR_MUL_FAILURE();\\n    error PROOF_FAILURE();\\n\\n    function getVerificationKeyHash() public pure virtual returns (bytes32);\\n\\n    function loadVerificationKey(uint256 _vk, uint256 _omegaInverseLoc) internal pure virtual;\\n\\n    /**\\n     * @notice Verify a Ultra Plonk proof\\n     * @param _proof - The serialized proof\\n     * @param _publicInputs - An array of the public inputs\\n     * @return True if proof is valid, reverts otherwise\\n     */\\n    function verify(bytes calldata _proof, bytes32[] calldata _publicInputs) external view returns (bool) {\\n        loadVerificationKey(N_LOC, OMEGA_INVERSE_LOC);\\n\\n        uint256 requiredPublicInputCount;\\n        assembly {\\n            requiredPublicInputCount := mload(NUM_INPUTS_LOC)\\n        }\\n        if (requiredPublicInputCount != _publicInputs.length) {\\n            revert PUBLIC_INPUT_COUNT_INVALID(requiredPublicInputCount, _publicInputs.length);\\n        }\\n\\n        assembly {\\n            let q := 21888242871839275222246405745257275088696311157297823662689037894645226208583 // EC group order\\n            let p := 21888242871839275222246405745257275088548364400416034343698204186575808495617 // Prime field order\\n\\n            /**\\n             * LOAD PROOF FROM CALLDATA\\n             */\\n            {\\n                let data_ptr := add(calldataload(0x04), 0x24)\\n\\n                mstore(W1_Y_LOC, mod(calldataload(data_ptr), q))\\n                mstore(W1_X_LOC, mod(calldataload(add(data_ptr, 0x20)), q))\\n\\n                mstore(W2_Y_LOC, mod(calldataload(add(data_ptr, 0x40)), q))\\n                mstore(W2_X_LOC, mod(calldataload(add(data_ptr, 0x60)), q))\\n\\n                mstore(W3_Y_LOC, mod(calldataload(add(data_ptr, 0x80)), q))\\n                mstore(W3_X_LOC, mod(calldataload(add(data_ptr, 0xa0)), q))\\n\\n                mstore(W4_Y_LOC, mod(calldataload(add(data_ptr, 0xc0)), q))\\n                mstore(W4_X_LOC, mod(calldataload(add(data_ptr, 0xe0)), q))\\n\\n                mstore(S_Y_LOC, mod(calldataload(add(data_ptr, 0x100)), q))\\n                mstore(S_X_LOC, mod(calldataload(add(data_ptr, 0x120)), q))\\n                mstore(Z_Y_LOC, mod(calldataload(add(data_ptr, 0x140)), q))\\n                mstore(Z_X_LOC, mod(calldataload(add(data_ptr, 0x160)), q))\\n                mstore(Z_LOOKUP_Y_LOC, mod(calldataload(add(data_ptr, 0x180)), q))\\n                mstore(Z_LOOKUP_X_LOC, mod(calldataload(add(data_ptr, 0x1a0)), q))\\n                mstore(T1_Y_LOC, mod(calldataload(add(data_ptr, 0x1c0)), q))\\n                mstore(T1_X_LOC, mod(calldataload(add(data_ptr, 0x1e0)), q))\\n\\n                mstore(T2_Y_LOC, mod(calldataload(add(data_ptr, 0x200)), q))\\n                mstore(T2_X_LOC, mod(calldataload(add(data_ptr, 0x220)), q))\\n\\n                mstore(T3_Y_LOC, mod(calldataload(add(data_ptr, 0x240)), q))\\n                mstore(T3_X_LOC, mod(calldataload(add(data_ptr, 0x260)), q))\\n\\n                mstore(T4_Y_LOC, mod(calldataload(add(data_ptr, 0x280)), q))\\n                mstore(T4_X_LOC, mod(calldataload(add(data_ptr, 0x2a0)), q))\\n\\n                mstore(W1_EVAL_LOC, mod(calldataload(add(data_ptr, 0x2c0)), p))\\n                mstore(W2_EVAL_LOC, mod(calldataload(add(data_ptr, 0x2e0)), p))\\n                mstore(W3_EVAL_LOC, mod(calldataload(add(data_ptr, 0x300)), p))\\n                mstore(W4_EVAL_LOC, mod(calldataload(add(data_ptr, 0x320)), p))\\n                mstore(S_EVAL_LOC, mod(calldataload(add(data_ptr, 0x340)), p))\\n                mstore(Z_EVAL_LOC, mod(calldataload(add(data_ptr, 0x360)), p))\\n                mstore(Z_LOOKUP_EVAL_LOC, mod(calldataload(add(data_ptr, 0x380)), p))\\n                mstore(Q1_EVAL_LOC, mod(calldataload(add(data_ptr, 0x3a0)), p))\\n                mstore(Q2_EVAL_LOC, mod(calldataload(add(data_ptr, 0x3c0)), p))\\n                mstore(Q3_EVAL_LOC, mod(calldataload(add(data_ptr, 0x3e0)), p))\\n                mstore(Q4_EVAL_LOC, mod(calldataload(add(data_ptr, 0x400)), p))\\n                mstore(QM_EVAL_LOC, mod(calldataload(add(data_ptr, 0x420)), p))\\n                mstore(QC_EVAL_LOC, mod(calldataload(add(data_ptr, 0x440)), p))\\n                mstore(QARITH_EVAL_LOC, mod(calldataload(add(data_ptr, 0x460)), p))\\n                mstore(QSORT_EVAL_LOC, mod(calldataload(add(data_ptr, 0x480)), p))\\n                mstore(QELLIPTIC_EVAL_LOC, mod(calldataload(add(data_ptr, 0x4a0)), p))\\n                mstore(QAUX_EVAL_LOC, mod(calldataload(add(data_ptr, 0x4c0)), p))\\n\\n                mstore(SIGMA1_EVAL_LOC, mod(calldataload(add(data_ptr, 0x4e0)), p))\\n                mstore(SIGMA2_EVAL_LOC, mod(calldataload(add(data_ptr, 0x500)), p))\\n\\n                mstore(SIGMA3_EVAL_LOC, mod(calldataload(add(data_ptr, 0x520)), p))\\n                mstore(SIGMA4_EVAL_LOC, mod(calldataload(add(data_ptr, 0x540)), p))\\n\\n                mstore(TABLE1_EVAL_LOC, mod(calldataload(add(data_ptr, 0x560)), p))\\n                mstore(TABLE2_EVAL_LOC, mod(calldataload(add(data_ptr, 0x580)), p))\\n                mstore(TABLE3_EVAL_LOC, mod(calldataload(add(data_ptr, 0x5a0)), p))\\n                mstore(TABLE4_EVAL_LOC, mod(calldataload(add(data_ptr, 0x5c0)), p))\\n                mstore(TABLE_TYPE_EVAL_LOC, mod(calldataload(add(data_ptr, 0x5e0)), p))\\n\\n                mstore(ID1_EVAL_LOC, mod(calldataload(add(data_ptr, 0x600)), p))\\n                mstore(ID2_EVAL_LOC, mod(calldataload(add(data_ptr, 0x620)), p))\\n                mstore(ID3_EVAL_LOC, mod(calldataload(add(data_ptr, 0x640)), p))\\n                mstore(ID4_EVAL_LOC, mod(calldataload(add(data_ptr, 0x660)), p))\\n\\n                mstore(W1_OMEGA_EVAL_LOC, mod(calldataload(add(data_ptr, 0x680)), p))\\n                mstore(W2_OMEGA_EVAL_LOC, mod(calldataload(add(data_ptr, 0x6a0)), p))\\n                mstore(W3_OMEGA_EVAL_LOC, mod(calldataload(add(data_ptr, 0x6c0)), p))\\n                mstore(W4_OMEGA_EVAL_LOC, mod(calldataload(add(data_ptr, 0x6e0)), p))\\n                mstore(S_OMEGA_EVAL_LOC, mod(calldataload(add(data_ptr, 0x700)), p))\\n\\n                mstore(Z_OMEGA_EVAL_LOC, mod(calldataload(add(data_ptr, 0x720)), p))\\n\\n                mstore(Z_LOOKUP_OMEGA_EVAL_LOC, mod(calldataload(add(data_ptr, 0x740)), p))\\n                mstore(TABLE1_OMEGA_EVAL_LOC, mod(calldataload(add(data_ptr, 0x760)), p))\\n                mstore(TABLE2_OMEGA_EVAL_LOC, mod(calldataload(add(data_ptr, 0x780)), p))\\n                mstore(TABLE3_OMEGA_EVAL_LOC, mod(calldataload(add(data_ptr, 0x7a0)), p))\\n                mstore(TABLE4_OMEGA_EVAL_LOC, mod(calldataload(add(data_ptr, 0x7c0)), p))\\n\\n                mstore(PI_Z_Y_LOC, mod(calldataload(add(data_ptr, 0x7e0)), q))\\n                mstore(PI_Z_X_LOC, mod(calldataload(add(data_ptr, 0x800)), q))\\n\\n                mstore(PI_Z_OMEGA_Y_LOC, mod(calldataload(add(data_ptr, 0x820)), q))\\n                mstore(PI_Z_OMEGA_X_LOC, mod(calldataload(add(data_ptr, 0x840)), q))\\n            }\\n\\n            /**\\n             * LOAD RECURSIVE PROOF INTO MEMORY\\n             */\\n            {\\n                if mload(CONTAINS_RECURSIVE_PROOF_LOC) {\\n                    let public_inputs_ptr := add(calldataload(0x24), 0x24)\\n                    let index_counter := add(shl(5, mload(RECURSIVE_PROOF_PUBLIC_INPUT_INDICES_LOC)), public_inputs_ptr)\\n\\n                    let x0 := calldataload(index_counter)\\n                    x0 := add(x0, shl(68, calldataload(add(index_counter, 0x20))))\\n                    x0 := add(x0, shl(136, calldataload(add(index_counter, 0x40))))\\n                    x0 := add(x0, shl(204, calldataload(add(index_counter, 0x60))))\\n                    let y0 := calldataload(add(index_counter, 0x80))\\n                    y0 := add(y0, shl(68, calldataload(add(index_counter, 0xa0))))\\n                    y0 := add(y0, shl(136, calldataload(add(index_counter, 0xc0))))\\n                    y0 := add(y0, shl(204, calldataload(add(index_counter, 0xe0))))\\n                    let x1 := calldataload(add(index_counter, 0x100))\\n                    x1 := add(x1, shl(68, calldataload(add(index_counter, 0x120))))\\n                    x1 := add(x1, shl(136, calldataload(add(index_counter, 0x140))))\\n                    x1 := add(x1, shl(204, calldataload(add(index_counter, 0x160))))\\n                    let y1 := calldataload(add(index_counter, 0x180))\\n                    y1 := add(y1, shl(68, calldataload(add(index_counter, 0x1a0))))\\n                    y1 := add(y1, shl(136, calldataload(add(index_counter, 0x1c0))))\\n                    y1 := add(y1, shl(204, calldataload(add(index_counter, 0x1e0))))\\n                    mstore(RECURSIVE_P1_X_LOC, x0)\\n                    mstore(RECURSIVE_P1_Y_LOC, y0)\\n                    mstore(RECURSIVE_P2_X_LOC, x1)\\n                    mstore(RECURSIVE_P2_Y_LOC, y1)\\n\\n                    // validate these are valid bn128 G1 points\\n                    if iszero(and(and(lt(x0, q), lt(x1, q)), and(lt(y0, q), lt(y1, q)))) {\\n                        mstore(0x00, PUBLIC_INPUT_INVALID_BN128_G1_POINT_SELECTOR)\\n                        revert(0x00, 0x04)\\n                    }\\n                }\\n            }\\n\\n            {\\n                /**\\n                 * Generate initial challenge\\n                 */\\n                mstore(0x00, shl(224, mload(N_LOC)))\\n                mstore(0x04, shl(224, mload(NUM_INPUTS_LOC)))\\n                let challenge := keccak256(0x00, 0x08)\\n\\n                /**\\n                 * Generate eta challenge\\n                 */\\n                mstore(PUBLIC_INPUTS_HASH_LOCATION, challenge)\\n                // The public input location is stored at 0x24, we then add 0x24 to skip selector and the length of public inputs\\n                let public_inputs_start := add(calldataload(0x24), 0x24)\\n                // copy the public inputs over\\n                let public_input_size := mul(mload(NUM_INPUTS_LOC), 0x20)\\n                calldatacopy(add(PUBLIC_INPUTS_HASH_LOCATION, 0x20), public_inputs_start, public_input_size)\\n\\n                // copy W1, W2, W3 into challenge. Each point is 0x40 bytes, so load 0xc0 = 3 * 0x40 bytes (ETA input length)\\n                let w_start := add(calldataload(0x04), 0x24)\\n                calldatacopy(add(add(PUBLIC_INPUTS_HASH_LOCATION, 0x20), public_input_size), w_start, ETA_INPUT_LENGTH)\\n\\n                // Challenge is the old challenge + public inputs + W1, W2, W3 (0x20 + public_input_size + 0xc0)\\n                let challenge_bytes_size := add(0x20, add(public_input_size, ETA_INPUT_LENGTH))\\n\\n                challenge := keccak256(PUBLIC_INPUTS_HASH_LOCATION, challenge_bytes_size)\\n                {\\n                    let eta := mod(challenge, p)\\n                    mstore(C_ETA_LOC, eta)\\n                    mstore(C_ETA_SQR_LOC, mulmod(eta, eta, p))\\n                    mstore(C_ETA_CUBE_LOC, mulmod(mload(C_ETA_SQR_LOC), eta, p))\\n                }\\n\\n                /**\\n                 * Generate beta challenge\\n                 */\\n                mstore(0x00, challenge)\\n                mstore(0x20, mload(W4_Y_LOC))\\n                mstore(0x40, mload(W4_X_LOC))\\n                mstore(0x60, mload(S_Y_LOC))\\n                mstore(0x80, mload(S_X_LOC))\\n                challenge := keccak256(0x00, 0xa0)\\n                mstore(C_BETA_LOC, mod(challenge, p))\\n\\n                /**\\n                 * Generate gamma challenge\\n                 */\\n                mstore(0x00, challenge)\\n                mstore8(0x20, 0x01)\\n                challenge := keccak256(0x00, 0x21)\\n                mstore(C_GAMMA_LOC, mod(challenge, p))\\n\\n                /**\\n                 * Generate alpha challenge\\n                 */\\n                mstore(0x00, challenge)\\n                mstore(0x20, mload(Z_Y_LOC))\\n                mstore(0x40, mload(Z_X_LOC))\\n                mstore(0x60, mload(Z_LOOKUP_Y_LOC))\\n                mstore(0x80, mload(Z_LOOKUP_X_LOC))\\n                challenge := keccak256(0x00, 0xa0)\\n                mstore(C_ALPHA_LOC, mod(challenge, p))\\n\\n                /**\\n                 * Compute and store some powers of alpha for future computations\\n                 */\\n                let alpha := mload(C_ALPHA_LOC)\\n                mstore(C_ALPHA_SQR_LOC, mulmod(alpha, alpha, p))\\n                mstore(C_ALPHA_CUBE_LOC, mulmod(mload(C_ALPHA_SQR_LOC), alpha, p))\\n                mstore(C_ALPHA_QUAD_LOC, mulmod(mload(C_ALPHA_CUBE_LOC), alpha, p))\\n                mstore(C_ALPHA_BASE_LOC, alpha)\\n\\n                /**\\n                 * Generate zeta challenge\\n                 */\\n                mstore(0x00, challenge)\\n                mstore(0x20, mload(T1_Y_LOC))\\n                mstore(0x40, mload(T1_X_LOC))\\n                mstore(0x60, mload(T2_Y_LOC))\\n                mstore(0x80, mload(T2_X_LOC))\\n                mstore(0xa0, mload(T3_Y_LOC))\\n                mstore(0xc0, mload(T3_X_LOC))\\n                mstore(0xe0, mload(T4_Y_LOC))\\n                mstore(0x100, mload(T4_X_LOC))\\n\\n                challenge := keccak256(0x00, 0x120)\\n\\n                mstore(C_ZETA_LOC, mod(challenge, p))\\n                mstore(C_CURRENT_LOC, challenge)\\n            }\\n\\n            /**\\n             * EVALUATE FIELD OPERATIONS\\n             */\\n\\n            /**\\n             * COMPUTE PUBLIC INPUT DELTA\\n             * \\u0394PI = \\u220f\\u1d62\\u2208\\u2113(w\\u1d62 + \\u03b2 \\u03c3(i) + \\u03b3) / \\u220f\\u1d62\\u2208\\u2113(w\\u1d62 + \\u03b2 \\u03c3'(i) + \\u03b3)\\n             */\\n            {\\n                let beta := mload(C_BETA_LOC) // \\u03b2\\n                let gamma := mload(C_GAMMA_LOC) // \\u03b3\\n                let work_root := mload(OMEGA_LOC) // \\u03c9\\n                let numerator_value := 1\\n                let denominator_value := 1\\n\\n                let p_clone := p // move p to the front of the stack\\n                let valid_inputs := true\\n\\n                // Load the starting point of the public inputs (jump over the selector and the length of public inputs [0x24])\\n                let public_inputs_ptr := add(calldataload(0x24), 0x24)\\n\\n                // endpoint_ptr = public_inputs_ptr + num_inputs * 0x20. // every public input is 0x20 bytes\\n                let endpoint_ptr := add(public_inputs_ptr, mul(mload(NUM_INPUTS_LOC), 0x20))\\n\\n                // root_1 = \\u03b2 * 0x05\\n                let root_1 := mulmod(beta, 0x05, p_clone) // k1.\\u03b2\\n                // root_2 = \\u03b2 * 0x0c\\n                let root_2 := mulmod(beta, 0x0c, p_clone)\\n                // @note 0x05 + 0x07 == 0x0c == external coset generator\\n\\n                for {} lt(public_inputs_ptr, endpoint_ptr) { public_inputs_ptr := add(public_inputs_ptr, 0x20) } {\\n                    /**\\n                     * input = public_input[i]\\n                     * valid_inputs &= input < p\\n                     * temp = input + gamma\\n                     * numerator_value *= (\\u03b2.\\u03c3(i) + w\\u1d62 + \\u03b3)  // \\u03c3(i) = 0x05.\\u03c9\\u2071\\n                     * denominator_value *= (\\u03b2.\\u03c3'(i) + w\\u1d62 + \\u03b3) // \\u03c3'(i) = 0x0c.\\u03c9\\u2071\\n                     * root_1 *= \\u03c9\\n                     * root_2 *= \\u03c9\\n                     */\\n\\n                    let input := calldataload(public_inputs_ptr)\\n                    valid_inputs := and(valid_inputs, lt(input, p_clone))\\n                    let temp := addmod(input, gamma, p_clone)\\n\\n                    numerator_value := mulmod(numerator_value, add(root_1, temp), p_clone)\\n                    denominator_value := mulmod(denominator_value, add(root_2, temp), p_clone)\\n\\n                    root_1 := mulmod(root_1, work_root, p_clone)\\n                    root_2 := mulmod(root_2, work_root, p_clone)\\n                }\\n\\n                // Revert if not all public inputs are field elements (i.e. < p)\\n                if iszero(valid_inputs) {\\n                    mstore(0x00, PUBLIC_INPUT_GE_P_SELECTOR)\\n                    revert(0x00, 0x04)\\n                }\\n\\n                mstore(DELTA_NUMERATOR_LOC, numerator_value)\\n                mstore(DELTA_DENOMINATOR_LOC, denominator_value)\\n            }\\n\\n            /**\\n             * Compute Plookup delta factor [\\u03b3(1 + \\u03b2)]^{n-k}\\n             * k = num roots cut out of Z_H = 4\\n             */\\n            {\\n                let delta_base := mulmod(mload(C_GAMMA_LOC), addmod(mload(C_BETA_LOC), 1, p), p)\\n                let delta_numerator := delta_base\\n                {\\n                    let exponent := mload(N_LOC)\\n                    let count := 1\\n                    for {} lt(count, exponent) { count := add(count, count) } {\\n                        delta_numerator := mulmod(delta_numerator, delta_numerator, p)\\n                    }\\n                }\\n                mstore(PLOOKUP_DELTA_NUMERATOR_LOC, delta_numerator)\\n\\n                let delta_denominator := mulmod(delta_base, delta_base, p)\\n                delta_denominator := mulmod(delta_denominator, delta_denominator, p)\\n                mstore(PLOOKUP_DELTA_DENOMINATOR_LOC, delta_denominator)\\n            }\\n            /**\\n             * Compute lagrange poly and vanishing poly fractions\\n             */\\n            {\\n                /**\\n                 * vanishing_numerator = zeta\\n                 * ZETA_POW_N = zeta^n\\n                 * vanishing_numerator -= 1\\n                 * accumulating_root = omega_inverse\\n                 * work_root = p - accumulating_root\\n                 * domain_inverse = domain_inverse\\n                 * vanishing_denominator = zeta + work_root\\n                 * work_root *= accumulating_root\\n                 * vanishing_denominator *= (zeta + work_root)\\n                 * work_root *= accumulating_root\\n                 * vanishing_denominator *= (zeta + work_root)\\n                 * vanishing_denominator *= (zeta + (zeta + accumulating_root))\\n                 * work_root = omega\\n                 * lagrange_numerator = vanishing_numerator * domain_inverse\\n                 * l_start_denominator = zeta - 1\\n                 * accumulating_root = work_root^2\\n                 * l_end_denominator = accumulating_root^2 * work_root * zeta - 1\\n                 * Note: l_end_denominator term contains a term \\\\omega^5 to cut out 5 roots of unity from vanishing poly\\n                 */\\n\\n                let zeta := mload(C_ZETA_LOC)\\n\\n                // compute zeta^n, where n is a power of 2\\n                let vanishing_numerator := zeta\\n                {\\n                    // pow_small\\n                    let exponent := mload(N_LOC)\\n                    let count := 1\\n                    for {} lt(count, exponent) { count := add(count, count) } {\\n                        vanishing_numerator := mulmod(vanishing_numerator, vanishing_numerator, p)\\n                    }\\n                }\\n                mstore(ZETA_POW_N_LOC, vanishing_numerator)\\n                vanishing_numerator := addmod(vanishing_numerator, sub(p, 1), p)\\n\\n                let accumulating_root := mload(OMEGA_INVERSE_LOC)\\n                let work_root := sub(p, accumulating_root)\\n                let domain_inverse := mload(DOMAIN_INVERSE_LOC)\\n\\n                let vanishing_denominator := addmod(zeta, work_root, p)\\n                work_root := mulmod(work_root, accumulating_root, p)\\n                vanishing_denominator := mulmod(vanishing_denominator, addmod(zeta, work_root, p), p)\\n                work_root := mulmod(work_root, accumulating_root, p)\\n                vanishing_denominator := mulmod(vanishing_denominator, addmod(zeta, work_root, p), p)\\n                vanishing_denominator :=\\n                    mulmod(vanishing_denominator, addmod(zeta, mulmod(work_root, accumulating_root, p), p), p)\\n\\n                work_root := mload(OMEGA_LOC)\\n\\n                let lagrange_numerator := mulmod(vanishing_numerator, domain_inverse, p)\\n                let l_start_denominator := addmod(zeta, sub(p, 1), p)\\n\\n                accumulating_root := mulmod(work_root, work_root, p)\\n\\n                let l_end_denominator :=\\n                    addmod(\\n                        mulmod(mulmod(mulmod(accumulating_root, accumulating_root, p), work_root, p), zeta, p), sub(p, 1), p\\n                    )\\n\\n                /**\\n                 * Compute inversions using Montgomery's batch inversion trick\\n                 */\\n                let accumulator := mload(DELTA_DENOMINATOR_LOC)\\n                let t0 := accumulator\\n                accumulator := mulmod(accumulator, vanishing_denominator, p)\\n                let t1 := accumulator\\n                accumulator := mulmod(accumulator, vanishing_numerator, p)\\n                let t2 := accumulator\\n                accumulator := mulmod(accumulator, l_start_denominator, p)\\n                let t3 := accumulator\\n                accumulator := mulmod(accumulator, mload(PLOOKUP_DELTA_DENOMINATOR_LOC), p)\\n                let t4 := accumulator\\n                {\\n                    mstore(0, 0x20)\\n                    mstore(0x20, 0x20)\\n                    mstore(0x40, 0x20)\\n                    mstore(0x60, mulmod(accumulator, l_end_denominator, p))\\n                    mstore(0x80, sub(p, 2))\\n                    mstore(0xa0, p)\\n                    if iszero(staticcall(gas(), 0x05, 0x00, 0xc0, 0x00, 0x20)) {\\n                        mstore(0x0, MOD_EXP_FAILURE_SELECTOR)\\n                        revert(0x00, 0x04)\\n                    }\\n                    accumulator := mload(0x00)\\n                }\\n\\n                t4 := mulmod(accumulator, t4, p)\\n                accumulator := mulmod(accumulator, l_end_denominator, p)\\n\\n                t3 := mulmod(accumulator, t3, p)\\n                accumulator := mulmod(accumulator, mload(PLOOKUP_DELTA_DENOMINATOR_LOC), p)\\n\\n                t2 := mulmod(accumulator, t2, p)\\n                accumulator := mulmod(accumulator, l_start_denominator, p)\\n\\n                t1 := mulmod(accumulator, t1, p)\\n                accumulator := mulmod(accumulator, vanishing_numerator, p)\\n\\n                t0 := mulmod(accumulator, t0, p)\\n                accumulator := mulmod(accumulator, vanishing_denominator, p)\\n\\n                accumulator := mulmod(mulmod(accumulator, accumulator, p), mload(DELTA_DENOMINATOR_LOC), p)\\n\\n                mstore(PUBLIC_INPUT_DELTA_LOC, mulmod(mload(DELTA_NUMERATOR_LOC), accumulator, p))\\n                mstore(ZERO_POLY_LOC, mulmod(vanishing_numerator, t0, p))\\n                mstore(ZERO_POLY_INVERSE_LOC, mulmod(vanishing_denominator, t1, p))\\n                mstore(L_START_LOC, mulmod(lagrange_numerator, t2, p))\\n                mstore(PLOOKUP_DELTA_LOC, mulmod(mload(PLOOKUP_DELTA_NUMERATOR_LOC), t3, p))\\n                mstore(L_END_LOC, mulmod(lagrange_numerator, t4, p))\\n            }\\n\\n            /**\\n             * UltraPlonk Widget Ordering:\\n             *\\n             * 1. Permutation widget\\n             * 2. Plookup widget\\n             * 3. Arithmetic widget\\n             * 4. Fixed base widget (?)\\n             * 5. GenPermSort widget\\n             * 6. Elliptic widget\\n             * 7. Auxiliary widget\\n             */\\n\\n            /**\\n             * COMPUTE PERMUTATION WIDGET EVALUATION\\n             */\\n            {\\n                let alpha := mload(C_ALPHA_LOC)\\n                let beta := mload(C_BETA_LOC)\\n                let gamma := mload(C_GAMMA_LOC)\\n\\n                /**\\n                 * t1 = (W1 + gamma + beta * ID1) * (W2 + gamma + beta * ID2)\\n                 * t2 = (W3 + gamma + beta * ID3) * (W4 + gamma + beta * ID4)\\n                 * result = alpha_base * z_eval * t1 * t2\\n                 * t1 = (W1 + gamma + beta * sigma_1_eval) * (W2 + gamma + beta * sigma_2_eval)\\n                 * t2 = (W2 + gamma + beta * sigma_3_eval) * (W3 + gamma + beta * sigma_4_eval)\\n                 * result -= (alpha_base * z_omega_eval * t1 * t2)\\n                 */\\n                let t1 :=\\n                    mulmod(\\n                        add(add(mload(W1_EVAL_LOC), gamma), mulmod(beta, mload(ID1_EVAL_LOC), p)),\\n                        add(add(mload(W2_EVAL_LOC), gamma), mulmod(beta, mload(ID2_EVAL_LOC), p)),\\n                        p\\n                    )\\n                let t2 :=\\n                    mulmod(\\n                        add(add(mload(W3_EVAL_LOC), gamma), mulmod(beta, mload(ID3_EVAL_LOC), p)),\\n                        add(add(mload(W4_EVAL_LOC), gamma), mulmod(beta, mload(ID4_EVAL_LOC), p)),\\n                        p\\n                    )\\n                let result := mulmod(mload(C_ALPHA_BASE_LOC), mulmod(mload(Z_EVAL_LOC), mulmod(t1, t2, p), p), p)\\n                t1 :=\\n                    mulmod(\\n                        add(add(mload(W1_EVAL_LOC), gamma), mulmod(beta, mload(SIGMA1_EVAL_LOC), p)),\\n                        add(add(mload(W2_EVAL_LOC), gamma), mulmod(beta, mload(SIGMA2_EVAL_LOC), p)),\\n                        p\\n                    )\\n                t2 :=\\n                    mulmod(\\n                        add(add(mload(W3_EVAL_LOC), gamma), mulmod(beta, mload(SIGMA3_EVAL_LOC), p)),\\n                        add(add(mload(W4_EVAL_LOC), gamma), mulmod(beta, mload(SIGMA4_EVAL_LOC), p)),\\n                        p\\n                    )\\n                result :=\\n                    addmod(\\n                        result,\\n                        sub(p, mulmod(mload(C_ALPHA_BASE_LOC), mulmod(mload(Z_OMEGA_EVAL_LOC), mulmod(t1, t2, p), p), p)),\\n                        p\\n                    )\\n\\n                /**\\n                 * alpha_base *= alpha\\n                 * result += alpha_base . (L_{n-k}(\\u0293) . (z(\\u0293.\\u03c9) - \\u2206_{PI}))\\n                 * alpha_base *= alpha\\n                 * result += alpha_base . (L_1(\\u0293)(Z(\\u0293) - 1))\\n                 * alpha_Base *= alpha\\n                 */\\n                mstore(C_ALPHA_BASE_LOC, mulmod(mload(C_ALPHA_BASE_LOC), mload(C_ALPHA_LOC), p))\\n                result :=\\n                    addmod(\\n                        result,\\n                        mulmod(\\n                            mload(C_ALPHA_BASE_LOC),\\n                            mulmod(\\n                                mload(L_END_LOC),\\n                                addmod(mload(Z_OMEGA_EVAL_LOC), sub(p, mload(PUBLIC_INPUT_DELTA_LOC)), p),\\n                                p\\n                            ),\\n                            p\\n                        ),\\n                        p\\n                    )\\n                mstore(C_ALPHA_BASE_LOC, mulmod(mload(C_ALPHA_BASE_LOC), mload(C_ALPHA_LOC), p))\\n                mstore(\\n                    PERMUTATION_IDENTITY,\\n                    addmod(\\n                        result,\\n                        mulmod(\\n                            mload(C_ALPHA_BASE_LOC),\\n                            mulmod(mload(L_START_LOC), addmod(mload(Z_EVAL_LOC), sub(p, 1), p), p),\\n                            p\\n                        ),\\n                        p\\n                    )\\n                )\\n                mstore(C_ALPHA_BASE_LOC, mulmod(mload(C_ALPHA_BASE_LOC), mload(C_ALPHA_LOC), p))\\n            }\\n\\n            /**\\n             * COMPUTE PLOOKUP WIDGET EVALUATION\\n             */\\n            {\\n                /**\\n                 * Goal: f = (w1(z) + q2.w1(z\\u03c9)) + \\u03b7(w2(z) + qm.w2(z\\u03c9)) + \\u03b7\\u00b2(w3(z) + qc.w_3(z\\u03c9)) + q3(z).\\u03b7\\u00b3\\n                 * f = \\u03b7.q3(z)\\n                 * f += (w3(z) + qc.w_3(z\\u03c9))\\n                 * f *= \\u03b7\\n                 * f += (w2(z) + qm.w2(z\\u03c9))\\n                 * f *= \\u03b7\\n                 * f += (w1(z) + q2.w1(z\\u03c9))\\n                 */\\n                let f := mulmod(mload(C_ETA_LOC), mload(Q3_EVAL_LOC), p)\\n                f :=\\n                    addmod(f, addmod(mload(W3_EVAL_LOC), mulmod(mload(QC_EVAL_LOC), mload(W3_OMEGA_EVAL_LOC), p), p), p)\\n                f := mulmod(f, mload(C_ETA_LOC), p)\\n                f :=\\n                    addmod(f, addmod(mload(W2_EVAL_LOC), mulmod(mload(QM_EVAL_LOC), mload(W2_OMEGA_EVAL_LOC), p), p), p)\\n                f := mulmod(f, mload(C_ETA_LOC), p)\\n                f :=\\n                    addmod(f, addmod(mload(W1_EVAL_LOC), mulmod(mload(Q2_EVAL_LOC), mload(W1_OMEGA_EVAL_LOC), p), p), p)\\n\\n                // t(z) = table4(z).\\u03b7\\u00b3 + table3(z).\\u03b7\\u00b2 + table2(z).\\u03b7 + table1(z)\\n                let t :=\\n                    addmod(\\n                        addmod(\\n                            addmod(\\n                                mulmod(mload(TABLE4_EVAL_LOC), mload(C_ETA_CUBE_LOC), p),\\n                                mulmod(mload(TABLE3_EVAL_LOC), mload(C_ETA_SQR_LOC), p),\\n                                p\\n                            ),\\n                            mulmod(mload(TABLE2_EVAL_LOC), mload(C_ETA_LOC), p),\\n                            p\\n                        ),\\n                        mload(TABLE1_EVAL_LOC),\\n                        p\\n                    )\\n\\n                // t(zw) = table4(zw).\\u03b7\\u00b3 + table3(zw).\\u03b7\\u00b2 + table2(zw).\\u03b7 + table1(zw)\\n                let t_omega :=\\n                    addmod(\\n                        addmod(\\n                            addmod(\\n                                mulmod(mload(TABLE4_OMEGA_EVAL_LOC), mload(C_ETA_CUBE_LOC), p),\\n                                mulmod(mload(TABLE3_OMEGA_EVAL_LOC), mload(C_ETA_SQR_LOC), p),\\n                                p\\n                            ),\\n                            mulmod(mload(TABLE2_OMEGA_EVAL_LOC), mload(C_ETA_LOC), p),\\n                            p\\n                        ),\\n                        mload(TABLE1_OMEGA_EVAL_LOC),\\n                        p\\n                    )\\n\\n                /**\\n                 * Goal: numerator = (TABLE_TYPE_EVAL * f(z) + \\u03b3) * (t(z) + \\u03b2t(z\\u03c9) + \\u03b3(\\u03b2 + 1)) * (\\u03b2 + 1)\\n                 * gamma_beta_constant = \\u03b3(\\u03b2 + 1)\\n                 * numerator = f * TABLE_TYPE_EVAL + gamma\\n                 * temp0 = t(z) + t(z\\u03c9) * \\u03b2 + gamma_beta_constant\\n                 * numerator *= temp0\\n                 * numerator *= (\\u03b2 + 1)\\n                 * temp0 = alpha * l_1\\n                 * numerator += temp0\\n                 * numerator *= z_lookup(z)\\n                 * numerator -= temp0\\n                 */\\n                let gamma_beta_constant := mulmod(mload(C_GAMMA_LOC), addmod(mload(C_BETA_LOC), 1, p), p)\\n                let numerator := addmod(mulmod(f, mload(TABLE_TYPE_EVAL_LOC), p), mload(C_GAMMA_LOC), p)\\n                let temp0 := addmod(addmod(t, mulmod(t_omega, mload(C_BETA_LOC), p), p), gamma_beta_constant, p)\\n                numerator := mulmod(numerator, temp0, p)\\n                numerator := mulmod(numerator, addmod(mload(C_BETA_LOC), 1, p), p)\\n                temp0 := mulmod(mload(C_ALPHA_LOC), mload(L_START_LOC), p)\\n                numerator := addmod(numerator, temp0, p)\\n                numerator := mulmod(numerator, mload(Z_LOOKUP_EVAL_LOC), p)\\n                numerator := addmod(numerator, sub(p, temp0), p)\\n\\n                /**\\n                 * Goal: denominator = z_lookup(z\\u03c9)*[s(z) + \\u03b2s(z\\u03c9) + \\u03b3(1 + \\u03b2)] - [z_lookup(z\\u03c9) - [\\u03b3(1 + \\u03b2)]^{n-k}]*\\u03b1\\u00b2L_end(z)\\n                 * note: delta_factor = [\\u03b3(1 + \\u03b2)]^{n-k}\\n                 * denominator = s(z) + \\u03b2s(z\\u03c9) + \\u03b3(\\u03b2 + 1)\\n                 * temp1 = \\u03b1\\u00b2L_end(z)\\n                 * denominator -= temp1\\n                 * denominator *= z_lookup(z\\u03c9)\\n                 * denominator += temp1 * delta_factor\\n                 * PLOOKUP_IDENTITY = (numerator - denominator).alpha_base\\n                 * alpha_base *= alpha^3\\n                 */\\n                let denominator :=\\n                    addmod(\\n                        addmod(mload(S_EVAL_LOC), mulmod(mload(S_OMEGA_EVAL_LOC), mload(C_BETA_LOC), p), p),\\n                        gamma_beta_constant,\\n                        p\\n                    )\\n                let temp1 := mulmod(mload(C_ALPHA_SQR_LOC), mload(L_END_LOC), p)\\n                denominator := addmod(denominator, sub(p, temp1), p)\\n                denominator := mulmod(denominator, mload(Z_LOOKUP_OMEGA_EVAL_LOC), p)\\n                denominator := addmod(denominator, mulmod(temp1, mload(PLOOKUP_DELTA_LOC), p), p)\\n\\n                mstore(PLOOKUP_IDENTITY, mulmod(addmod(numerator, sub(p, denominator), p), mload(C_ALPHA_BASE_LOC), p))\\n\\n                // update alpha\\n                mstore(C_ALPHA_BASE_LOC, mulmod(mload(C_ALPHA_BASE_LOC), mload(C_ALPHA_CUBE_LOC), p))\\n            }\\n\\n            /**\\n             * COMPUTE ARITHMETIC WIDGET EVALUATION\\n             */\\n            {\\n                /**\\n                 * The basic arithmetic gate identity in standard plonk is as follows.\\n                 * (w_1 . w_2 . q_m) + (w_1 . q_1) + (w_2 . q_2) + (w_3 . q_3) + (w_4 . q_4) + q_c = 0\\n                 * However, for Ultraplonk, we extend this to support \\\"passing\\\" wires between rows (shown without alpha scaling below):\\n                 * q_arith * ( ( (-1/2) * (q_arith - 3) * q_m * w_1 * w_2 + q_1 * w_1 + q_2 * w_2 + q_3 * w_3 + q_4 * w_4 + q_c ) +\\n                 * (q_arith - 1)*( \\u03b1 * (q_arith - 2) * (w_1 + w_4 - w_1_omega + q_m) + w_4_omega) ) = 0\\n                 *\\n                 * This formula results in several cases depending on q_arith:\\n                 * 1. q_arith == 0: Arithmetic gate is completely disabled\\n                 *\\n                 * 2. q_arith == 1: Everything in the minigate on the right is disabled. The equation is just a standard plonk equation\\n                 * with extra wires: q_m * w_1 * w_2 + q_1 * w_1 + q_2 * w_2 + q_3 * w_3 + q_4 * w_4 + q_c = 0\\n                 *\\n                 * 3. q_arith == 2: The (w_1 + w_4 - ...) term is disabled. THe equation is:\\n                 * (1/2) * q_m * w_1 * w_2 + q_1 * w_1 + q_2 * w_2 + q_3 * w_3 + q_4 * w_4 + q_c + w_4_omega = 0\\n                 * It allows defining w_4 at next index (w_4_omega) in terms of current wire values\\n                 *\\n                 * 4. q_arith == 3: The product of w_1 and w_2 is disabled, but a mini addition gate is enabled. \\u03b1 allows us to split\\n                 * the equation into two:\\n                 *\\n                 * q_1 * w_1 + q_2 * w_2 + q_3 * w_3 + q_4 * w_4 + q_c + 2 * w_4_omega = 0\\n                 * and\\n                 * w_1 + w_4 - w_1_omega + q_m = 0  (we are reusing q_m here)\\n                 *\\n                 * 5. q_arith > 3: The product of w_1 and w_2 is scaled by (q_arith - 3), while the w_4_omega term is scaled by (q_arith - 1).\\n                 * The equation can be split into two:\\n                 *\\n                 * (q_arith - 3)* q_m * w_1 * w_ 2 + q_1 * w_1 + q_2 * w_2 + q_3 * w_3 + q_4 * w_4 + q_c + (q_arith - 1) * w_4_omega = 0\\n                 * and\\n                 * w_1 + w_4 - w_1_omega + q_m = 0\\n                 *\\n                 * The problem that q_m is used both in both equations can be dealt with by appropriately changing selector values at\\n                 * the next gate. Then we can treat (q_arith - 1) as a simulated q_6 selector and scale q_m to handle (q_arith - 3) at\\n                 * product.\\n                 */\\n\\n                let w1q1 := mulmod(mload(W1_EVAL_LOC), mload(Q1_EVAL_LOC), p)\\n                let w2q2 := mulmod(mload(W2_EVAL_LOC), mload(Q2_EVAL_LOC), p)\\n                let w3q3 := mulmod(mload(W3_EVAL_LOC), mload(Q3_EVAL_LOC), p)\\n                let w4q3 := mulmod(mload(W4_EVAL_LOC), mload(Q4_EVAL_LOC), p)\\n\\n                // @todo - Add a explicit test that hits QARITH == 3\\n                // w1w2qm := (w_1 . w_2 . q_m . (QARITH_EVAL_LOC - 3)) / 2\\n                let w1w2qm :=\\n                    mulmod(\\n                        mulmod(\\n                            mulmod(mulmod(mload(W1_EVAL_LOC), mload(W2_EVAL_LOC), p), mload(QM_EVAL_LOC), p),\\n                            addmod(mload(QARITH_EVAL_LOC), sub(p, 3), p),\\n                            p\\n                        ),\\n                        NEGATIVE_INVERSE_OF_2_MODULO_P,\\n                        p\\n                    )\\n\\n                // (w_1 . w_2 . q_m . (q_arith - 3)) / -2) + (w_1 . q_1) + (w_2 . q_2) + (w_3 . q_3) + (w_4 . q_4) + q_c\\n                let identity :=\\n                    addmod(\\n                        mload(QC_EVAL_LOC), addmod(w4q3, addmod(w3q3, addmod(w2q2, addmod(w1q1, w1w2qm, p), p), p), p), p\\n                    )\\n\\n                // if q_arith == 3 we evaluate an additional mini addition gate (on top of the regular one), where:\\n                // w_1 + w_4 - w_1_omega + q_m = 0\\n                // we use this gate to save an addition gate when adding or subtracting non-native field elements\\n                // \\u03b1 * (q_arith - 2) * (w_1 + w_4 - w_1_omega + q_m)\\n                let extra_small_addition_gate_identity :=\\n                    mulmod(\\n                        mload(C_ALPHA_LOC),\\n                        mulmod(\\n                            addmod(mload(QARITH_EVAL_LOC), sub(p, 2), p),\\n                            addmod(\\n                                mload(QM_EVAL_LOC),\\n                                addmod(\\n                                    sub(p, mload(W1_OMEGA_EVAL_LOC)), addmod(mload(W1_EVAL_LOC), mload(W4_EVAL_LOC), p), p\\n                                ),\\n                                p\\n                            ),\\n                            p\\n                        ),\\n                        p\\n                    )\\n\\n                // if q_arith == 2 OR q_arith == 3 we add the 4th wire of the NEXT gate into the arithmetic identity\\n                // N.B. if q_arith > 2, this wire value will be scaled by (q_arith - 1) relative to the other gate wires!\\n                // alpha_base * q_arith * (identity + (q_arith - 1) * (w_4_omega + extra_small_addition_gate_identity))\\n                mstore(\\n                    ARITHMETIC_IDENTITY,\\n                    mulmod(\\n                        mload(C_ALPHA_BASE_LOC),\\n                        mulmod(\\n                            mload(QARITH_EVAL_LOC),\\n                            addmod(\\n                                identity,\\n                                mulmod(\\n                                    addmod(mload(QARITH_EVAL_LOC), sub(p, 1), p),\\n                                    addmod(mload(W4_OMEGA_EVAL_LOC), extra_small_addition_gate_identity, p),\\n                                    p\\n                                ),\\n                                p\\n                            ),\\n                            p\\n                        ),\\n                        p\\n                    )\\n                )\\n\\n                // update alpha\\n                mstore(C_ALPHA_BASE_LOC, mulmod(mload(C_ALPHA_BASE_LOC), mload(C_ALPHA_SQR_LOC), p))\\n            }\\n\\n            /**\\n             * COMPUTE GENPERMSORT WIDGET EVALUATION\\n             */\\n            {\\n                /**\\n                 * D1 = (w2 - w1)\\n                 * D2 = (w3 - w2)\\n                 * D3 = (w4 - w3)\\n                 * D4 = (w1_omega - w4)\\n                 *\\n                 * \\u03b1_a = alpha_base\\n                 * \\u03b1_b = alpha_base * \\u03b1\\n                 * \\u03b1_c = alpha_base * \\u03b1^2\\n                 * \\u03b1_d = alpha_base * \\u03b1^3\\n                 *\\n                 * range_accumulator = (\\n                 *   D1(D1 - 1)(D1 - 2)(D1 - 3).\\u03b1_a +\\n                 *   D2(D2 - 1)(D2 - 2)(D2 - 3).\\u03b1_b +\\n                 *   D3(D3 - 1)(D3 - 2)(D3 - 3).\\u03b1_c +\\n                 *   D4(D4 - 1)(D4 - 2)(D4 - 3).\\u03b1_d +\\n                 * ) . q_sort\\n                 */\\n                let minus_two := sub(p, 2)\\n                let minus_three := sub(p, 3)\\n                let d1 := addmod(mload(W2_EVAL_LOC), sub(p, mload(W1_EVAL_LOC)), p)\\n                let d2 := addmod(mload(W3_EVAL_LOC), sub(p, mload(W2_EVAL_LOC)), p)\\n                let d3 := addmod(mload(W4_EVAL_LOC), sub(p, mload(W3_EVAL_LOC)), p)\\n                let d4 := addmod(mload(W1_OMEGA_EVAL_LOC), sub(p, mload(W4_EVAL_LOC)), p)\\n\\n                let range_accumulator :=\\n                    mulmod(\\n                        mulmod(\\n                            mulmod(addmod(mulmod(d1, d1, p), sub(p, d1), p), addmod(d1, minus_two, p), p),\\n                            addmod(d1, minus_three, p),\\n                            p\\n                        ),\\n                        mload(C_ALPHA_BASE_LOC),\\n                        p\\n                    )\\n                range_accumulator :=\\n                    addmod(\\n                        range_accumulator,\\n                        mulmod(\\n                            mulmod(\\n                                mulmod(addmod(mulmod(d2, d2, p), sub(p, d2), p), addmod(d2, minus_two, p), p),\\n                                addmod(d2, minus_three, p),\\n                                p\\n                            ),\\n                            mulmod(mload(C_ALPHA_BASE_LOC), mload(C_ALPHA_LOC), p),\\n                            p\\n                        ),\\n                        p\\n                    )\\n                range_accumulator :=\\n                    addmod(\\n                        range_accumulator,\\n                        mulmod(\\n                            mulmod(\\n                                mulmod(addmod(mulmod(d3, d3, p), sub(p, d3), p), addmod(d3, minus_two, p), p),\\n                                addmod(d3, minus_three, p),\\n                                p\\n                            ),\\n                            mulmod(mload(C_ALPHA_BASE_LOC), mload(C_ALPHA_SQR_LOC), p),\\n                            p\\n                        ),\\n                        p\\n                    )\\n                range_accumulator :=\\n                    addmod(\\n                        range_accumulator,\\n                        mulmod(\\n                            mulmod(\\n                                mulmod(addmod(mulmod(d4, d4, p), sub(p, d4), p), addmod(d4, minus_two, p), p),\\n                                addmod(d4, minus_three, p),\\n                                p\\n                            ),\\n                            mulmod(mload(C_ALPHA_BASE_LOC), mload(C_ALPHA_CUBE_LOC), p),\\n                            p\\n                        ),\\n                        p\\n                    )\\n                range_accumulator := mulmod(range_accumulator, mload(QSORT_EVAL_LOC), p)\\n\\n                mstore(SORT_IDENTITY, range_accumulator)\\n\\n                // update alpha\\n                mstore(C_ALPHA_BASE_LOC, mulmod(mload(C_ALPHA_BASE_LOC), mload(C_ALPHA_QUAD_LOC), p))\\n            }\\n\\n            /**\\n             * COMPUTE ELLIPTIC WIDGET EVALUATION\\n             */\\n            {\\n                /**\\n                 * endo_term = (-x_2) * x_1 * (x_3 * 2 + x_1) * q_beta\\n                 * endo_sqr_term = x_2^2\\n                 * endo_sqr_term *= (x_3 - x_1)\\n                 * endo_sqr_term *= q_beta^2\\n                 * leftovers = x_2^2\\n                 * leftovers *= x_2\\n                 * leftovers += x_1^2 * (x_3 + x_1) @follow-up Invalid comment in BB widget\\n                 * leftovers -= (y_2^2 + y_1^2)\\n                 * sign_term = y_2 * y_1\\n                 * sign_term += sign_term\\n                 * sign_term *= q_sign\\n                 */\\n                // q_elliptic * (x3 + x2 + x1)(x2 - x1)(x2 - x1) - y2^2 - y1^2 + 2(y2y1)*q_sign = 0\\n                let x_diff := addmod(mload(X2_EVAL_LOC), sub(p, mload(X1_EVAL_LOC)), p)\\n                let y2_sqr := mulmod(mload(Y2_EVAL_LOC), mload(Y2_EVAL_LOC), p)\\n                let y1_sqr := mulmod(mload(Y1_EVAL_LOC), mload(Y1_EVAL_LOC), p)\\n                let y1y2 := mulmod(mulmod(mload(Y1_EVAL_LOC), mload(Y2_EVAL_LOC), p), mload(QSIGN_LOC), p)\\n\\n                let x_add_identity :=\\n                    addmod(\\n                        mulmod(\\n                            addmod(mload(X3_EVAL_LOC), addmod(mload(X2_EVAL_LOC), mload(X1_EVAL_LOC), p), p),\\n                            mulmod(x_diff, x_diff, p),\\n                            p\\n                        ),\\n                        addmod(\\n                            sub(\\n                                p,\\n                                addmod(y2_sqr, y1_sqr, p)\\n                            ),\\n                            addmod(y1y2, y1y2, p),\\n                            p\\n                        ),\\n                        p\\n                    )\\n                x_add_identity :=\\n                    mulmod(\\n                        mulmod(\\n                            x_add_identity,\\n                            addmod(\\n                                1,\\n                                sub(p, mload(QM_EVAL_LOC)),\\n                                p\\n                            ),\\n                            p\\n                        ),\\n                        mload(C_ALPHA_BASE_LOC),\\n                        p\\n                    )\\n\\n                // q_elliptic * (x3 + x2 + x1)(x2 - x1)(x2 - x1) - y2^2 - y1^2 + 2(y2y1)*q_sign = 0\\n                let y1_plus_y3 := addmod(\\n                    mload(Y1_EVAL_LOC),\\n                    mload(Y3_EVAL_LOC),\\n                    p\\n                )\\n                let y_diff := addmod(mulmod(mload(Y2_EVAL_LOC), mload(QSIGN_LOC), p), sub(p, mload(Y1_EVAL_LOC)), p)\\n                let y_add_identity :=\\n                    addmod(\\n                        mulmod(y1_plus_y3, x_diff, p),\\n                        mulmod(addmod(mload(X3_EVAL_LOC), sub(p, mload(X1_EVAL_LOC)), p), y_diff, p),\\n                        p\\n                    )\\n                y_add_identity :=\\n                    mulmod(\\n                        mulmod(y_add_identity, addmod(1, sub(p, mload(QM_EVAL_LOC)), p), p),\\n                        mulmod(mload(C_ALPHA_BASE_LOC), mload(C_ALPHA_LOC), p),\\n                        p\\n                    )\\n\\n                // ELLIPTIC_IDENTITY = (x_identity + y_identity) * Q_ELLIPTIC_EVAL\\n                mstore(\\n                    ELLIPTIC_IDENTITY, mulmod(addmod(x_add_identity, y_add_identity, p), mload(QELLIPTIC_EVAL_LOC), p)\\n                )\\n            }\\n            {\\n                /**\\n                 * x_pow_4 = (y_1_sqr - curve_b) * x_1;\\n                 * y_1_sqr_mul_4 = y_1_sqr + y_1_sqr;\\n                 * y_1_sqr_mul_4 += y_1_sqr_mul_4;\\n                 * x_1_pow_4_mul_9 = x_pow_4;\\n                 * x_1_pow_4_mul_9 += x_1_pow_4_mul_9;\\n                 * x_1_pow_4_mul_9 += x_1_pow_4_mul_9;\\n                 * x_1_pow_4_mul_9 += x_1_pow_4_mul_9;\\n                 * x_1_pow_4_mul_9 += x_pow_4;\\n                 * x_1_sqr_mul_3 = x_1_sqr + x_1_sqr + x_1_sqr;\\n                 * x_double_identity = (x_3 + x_1 + x_1) * y_1_sqr_mul_4 - x_1_pow_4_mul_9;\\n                 * y_double_identity = x_1_sqr_mul_3 * (x_1 - x_3) - (y_1 + y_1) * (y_1 + y_3);\\n                 */\\n                // (x3 + x1 + x1) (4y1*y1) - 9 * x1 * x1 * x1 * x1 = 0\\n                let x1_sqr := mulmod(mload(X1_EVAL_LOC), mload(X1_EVAL_LOC), p)\\n                let y1_sqr := mulmod(mload(Y1_EVAL_LOC), mload(Y1_EVAL_LOC), p)\\n                let x_pow_4 := mulmod(addmod(y1_sqr, GRUMPKIN_CURVE_B_PARAMETER_NEGATED, p), mload(X1_EVAL_LOC), p)\\n                let y1_sqr_mul_4 := mulmod(y1_sqr, 4, p)\\n                let x1_pow_4_mul_9 := mulmod(x_pow_4, 9, p)\\n                let x1_sqr_mul_3 := mulmod(x1_sqr, 3, p)\\n                let x_double_identity :=\\n                    addmod(\\n                        mulmod(\\n                            addmod(mload(X3_EVAL_LOC), addmod(mload(X1_EVAL_LOC), mload(X1_EVAL_LOC), p), p),\\n                            y1_sqr_mul_4,\\n                            p\\n                        ),\\n                        sub(p, x1_pow_4_mul_9),\\n                        p\\n                    )\\n                // (y1 + y1) (2y1) - (3 * x1 * x1)(x1 - x3) = 0\\n                let y_double_identity :=\\n                    addmod(\\n                        mulmod(x1_sqr_mul_3, addmod(mload(X1_EVAL_LOC), sub(p, mload(X3_EVAL_LOC)), p), p),\\n                        sub(\\n                            p,\\n                            mulmod(\\n                                addmod(mload(Y1_EVAL_LOC), mload(Y1_EVAL_LOC), p),\\n                                addmod(mload(Y1_EVAL_LOC), mload(Y3_EVAL_LOC), p),\\n                                p\\n                            )\\n                        ),\\n                        p\\n                    )\\n                x_double_identity := mulmod(x_double_identity, mload(C_ALPHA_BASE_LOC), p)\\n                y_double_identity :=\\n                    mulmod(y_double_identity, mulmod(mload(C_ALPHA_BASE_LOC), mload(C_ALPHA_LOC), p), p)\\n                x_double_identity := mulmod(x_double_identity, mload(QM_EVAL_LOC), p)\\n                y_double_identity := mulmod(y_double_identity, mload(QM_EVAL_LOC), p)\\n                // ELLIPTIC_IDENTITY += (x_double_identity + y_double_identity) * Q_DOUBLE_EVAL\\n                mstore(\\n                    ELLIPTIC_IDENTITY,\\n                    addmod(\\n                        mload(ELLIPTIC_IDENTITY),\\n                        mulmod(addmod(x_double_identity, y_double_identity, p), mload(QELLIPTIC_EVAL_LOC), p),\\n                        p\\n                    )\\n                )\\n\\n                // update alpha\\n                mstore(C_ALPHA_BASE_LOC, mulmod(mload(C_ALPHA_BASE_LOC), mload(C_ALPHA_QUAD_LOC), p))\\n            }\\n\\n            /**\\n             * COMPUTE AUXILIARY WIDGET EVALUATION\\n             */\\n            {\\n                {\\n                    /**\\n                     * Non native field arithmetic gate 2\\n                     *             _                                                                               _\\n                     *            /   _                   _                               _       14                \\\\\\n                     * q_2 . q_4 |   (w_1 . w_2) + (w_1 . w_2) + (w_1 . w_4 + w_2 . w_3 - w_3) . 2    - w_3 - w_4   |\\n                     *            \\\\_                                                                               _/\\n                     *\\n                     * limb_subproduct = w_1 . w_2_omega + w_1_omega . w_2\\n                     * non_native_field_gate_2 = w_1 * w_4 + w_4 * w_3 - w_3_omega\\n                     * non_native_field_gate_2 = non_native_field_gate_2 * limb_size\\n                     * non_native_field_gate_2 -= w_4_omega\\n                     * non_native_field_gate_2 += limb_subproduct\\n                     * non_native_field_gate_2 *= q_4\\n                     * limb_subproduct *= limb_size\\n                     * limb_subproduct += w_1_omega * w_2_omega\\n                     * non_native_field_gate_1 = (limb_subproduct + w_3 + w_4) * q_3\\n                     * non_native_field_gate_3 = (limb_subproduct + w_4 - (w_3_omega + w_4_omega)) * q_m\\n                     * non_native_field_identity = (non_native_field_gate_1 + non_native_field_gate_2 + non_native_field_gate_3) * q_2\\n                     */\\n\\n                    let limb_subproduct :=\\n                        addmod(\\n                            mulmod(mload(W1_EVAL_LOC), mload(W2_OMEGA_EVAL_LOC), p),\\n                            mulmod(mload(W1_OMEGA_EVAL_LOC), mload(W2_EVAL_LOC), p),\\n                            p\\n                        )\\n\\n                    let non_native_field_gate_2 :=\\n                        addmod(\\n                            addmod(\\n                                mulmod(mload(W1_EVAL_LOC), mload(W4_EVAL_LOC), p),\\n                                mulmod(mload(W2_EVAL_LOC), mload(W3_EVAL_LOC), p),\\n                                p\\n                            ),\\n                            sub(p, mload(W3_OMEGA_EVAL_LOC)),\\n                            p\\n                        )\\n                    non_native_field_gate_2 := mulmod(non_native_field_gate_2, LIMB_SIZE, p)\\n                    non_native_field_gate_2 := addmod(non_native_field_gate_2, sub(p, mload(W4_OMEGA_EVAL_LOC)), p)\\n                    non_native_field_gate_2 := addmod(non_native_field_gate_2, limb_subproduct, p)\\n                    non_native_field_gate_2 := mulmod(non_native_field_gate_2, mload(Q4_EVAL_LOC), p)\\n                    limb_subproduct := mulmod(limb_subproduct, LIMB_SIZE, p)\\n                    limb_subproduct :=\\n                        addmod(limb_subproduct, mulmod(mload(W1_OMEGA_EVAL_LOC), mload(W2_OMEGA_EVAL_LOC), p), p)\\n                    let non_native_field_gate_1 :=\\n                        mulmod(\\n                            addmod(limb_subproduct, sub(p, addmod(mload(W3_EVAL_LOC), mload(W4_EVAL_LOC), p)), p),\\n                            mload(Q3_EVAL_LOC),\\n                            p\\n                        )\\n                    let non_native_field_gate_3 :=\\n                        mulmod(\\n                            addmod(\\n                                addmod(limb_subproduct, mload(W4_EVAL_LOC), p),\\n                                sub(p, addmod(mload(W3_OMEGA_EVAL_LOC), mload(W4_OMEGA_EVAL_LOC), p)),\\n                                p\\n                            ),\\n                            mload(QM_EVAL_LOC),\\n                            p\\n                        )\\n                    let non_native_field_identity :=\\n                        mulmod(\\n                            addmod(addmod(non_native_field_gate_1, non_native_field_gate_2, p), non_native_field_gate_3, p),\\n                            mload(Q2_EVAL_LOC),\\n                            p\\n                        )\\n\\n                    mstore(AUX_NON_NATIVE_FIELD_EVALUATION, non_native_field_identity)\\n                }\\n\\n                {\\n                    /**\\n                     * limb_accumulator_1 = w_2_omega;\\n                     * limb_accumulator_1 *= SUBLIMB_SHIFT;\\n                     * limb_accumulator_1 += w_1_omega;\\n                     * limb_accumulator_1 *= SUBLIMB_SHIFT;\\n                     * limb_accumulator_1 += w_3;\\n                     * limb_accumulator_1 *= SUBLIMB_SHIFT;\\n                     * limb_accumulator_1 += w_2;\\n                     * limb_accumulator_1 *= SUBLIMB_SHIFT;\\n                     * limb_accumulator_1 += w_1;\\n                     * limb_accumulator_1 -= w_4;\\n                     * limb_accumulator_1 *= q_4;\\n                     */\\n                    let limb_accumulator_1 := mulmod(mload(W2_OMEGA_EVAL_LOC), SUBLIMB_SHIFT, p)\\n                    limb_accumulator_1 := addmod(limb_accumulator_1, mload(W1_OMEGA_EVAL_LOC), p)\\n                    limb_accumulator_1 := mulmod(limb_accumulator_1, SUBLIMB_SHIFT, p)\\n                    limb_accumulator_1 := addmod(limb_accumulator_1, mload(W3_EVAL_LOC), p)\\n                    limb_accumulator_1 := mulmod(limb_accumulator_1, SUBLIMB_SHIFT, p)\\n                    limb_accumulator_1 := addmod(limb_accumulator_1, mload(W2_EVAL_LOC), p)\\n                    limb_accumulator_1 := mulmod(limb_accumulator_1, SUBLIMB_SHIFT, p)\\n                    limb_accumulator_1 := addmod(limb_accumulator_1, mload(W1_EVAL_LOC), p)\\n                    limb_accumulator_1 := addmod(limb_accumulator_1, sub(p, mload(W4_EVAL_LOC)), p)\\n                    limb_accumulator_1 := mulmod(limb_accumulator_1, mload(Q4_EVAL_LOC), p)\\n\\n                    /**\\n                     * limb_accumulator_2 = w_3_omega;\\n                     * limb_accumulator_2 *= SUBLIMB_SHIFT;\\n                     * limb_accumulator_2 += w_2_omega;\\n                     * limb_accumulator_2 *= SUBLIMB_SHIFT;\\n                     * limb_accumulator_2 += w_1_omega;\\n                     * limb_accumulator_2 *= SUBLIMB_SHIFT;\\n                     * limb_accumulator_2 += w_4;\\n                     * limb_accumulator_2 *= SUBLIMB_SHIFT;\\n                     * limb_accumulator_2 += w_3;\\n                     * limb_accumulator_2 -= w_4_omega;\\n                     * limb_accumulator_2 *= q_m;\\n                     */\\n                    let limb_accumulator_2 := mulmod(mload(W3_OMEGA_EVAL_LOC), SUBLIMB_SHIFT, p)\\n                    limb_accumulator_2 := addmod(limb_accumulator_2, mload(W2_OMEGA_EVAL_LOC), p)\\n                    limb_accumulator_2 := mulmod(limb_accumulator_2, SUBLIMB_SHIFT, p)\\n                    limb_accumulator_2 := addmod(limb_accumulator_2, mload(W1_OMEGA_EVAL_LOC), p)\\n                    limb_accumulator_2 := mulmod(limb_accumulator_2, SUBLIMB_SHIFT, p)\\n                    limb_accumulator_2 := addmod(limb_accumulator_2, mload(W4_EVAL_LOC), p)\\n                    limb_accumulator_2 := mulmod(limb_accumulator_2, SUBLIMB_SHIFT, p)\\n                    limb_accumulator_2 := addmod(limb_accumulator_2, mload(W3_EVAL_LOC), p)\\n                    limb_accumulator_2 := addmod(limb_accumulator_2, sub(p, mload(W4_OMEGA_EVAL_LOC)), p)\\n                    limb_accumulator_2 := mulmod(limb_accumulator_2, mload(QM_EVAL_LOC), p)\\n\\n                    mstore(\\n                        AUX_LIMB_ACCUMULATOR_EVALUATION,\\n                        mulmod(addmod(limb_accumulator_1, limb_accumulator_2, p), mload(Q3_EVAL_LOC), p)\\n                    )\\n                }\\n\\n                {\\n                    /**\\n                     * memory_record_check = w_3;\\n                     * memory_record_check *= eta;\\n                     * memory_record_check += w_2;\\n                     * memory_record_check *= eta;\\n                     * memory_record_check += w_1;\\n                     * memory_record_check *= eta;\\n                     * memory_record_check += q_c;\\n                     *\\n                     * partial_record_check = memory_record_check;\\n                     *\\n                     * memory_record_check -= w_4;\\n                     */\\n\\n                    let memory_record_check := mulmod(mload(W3_EVAL_LOC), mload(C_ETA_LOC), p)\\n                    memory_record_check := addmod(memory_record_check, mload(W2_EVAL_LOC), p)\\n                    memory_record_check := mulmod(memory_record_check, mload(C_ETA_LOC), p)\\n                    memory_record_check := addmod(memory_record_check, mload(W1_EVAL_LOC), p)\\n                    memory_record_check := mulmod(memory_record_check, mload(C_ETA_LOC), p)\\n                    memory_record_check := addmod(memory_record_check, mload(QC_EVAL_LOC), p)\\n\\n                    let partial_record_check := memory_record_check\\n                    memory_record_check := addmod(memory_record_check, sub(p, mload(W4_EVAL_LOC)), p)\\n\\n                    mstore(AUX_MEMORY_EVALUATION, memory_record_check)\\n\\n                    // index_delta = w_1_omega - w_1\\n                    let index_delta := addmod(mload(W1_OMEGA_EVAL_LOC), sub(p, mload(W1_EVAL_LOC)), p)\\n                    // record_delta = w_4_omega - w_4\\n                    let record_delta := addmod(mload(W4_OMEGA_EVAL_LOC), sub(p, mload(W4_EVAL_LOC)), p)\\n                    // index_is_monotonically_increasing = index_delta * (index_delta - 1)\\n                    let index_is_monotonically_increasing := mulmod(index_delta, addmod(index_delta, sub(p, 1), p), p)\\n\\n                    // adjacent_values_match_if_adjacent_indices_match = record_delta * (1 - index_delta)\\n                    let adjacent_values_match_if_adjacent_indices_match :=\\n                        mulmod(record_delta, addmod(1, sub(p, index_delta), p), p)\\n\\n                    // AUX_ROM_CONSISTENCY_EVALUATION = ((adjacent_values_match_if_adjacent_indices_match * alpha) + index_is_monotonically_increasing) * alpha + partial_record_check\\n                    mstore(\\n                        AUX_ROM_CONSISTENCY_EVALUATION,\\n                        addmod(\\n                            mulmod(\\n                                addmod(\\n                                    mulmod(adjacent_values_match_if_adjacent_indices_match, mload(C_ALPHA_LOC), p),\\n                                    index_is_monotonically_increasing,\\n                                    p\\n                                ),\\n                                mload(C_ALPHA_LOC),\\n                                p\\n                            ),\\n                            memory_record_check,\\n                            p\\n                        )\\n                    )\\n\\n                    {\\n                        /**\\n                         * next_gate_access_type = w_3_omega;\\n                         * next_gate_access_type *= eta;\\n                         * next_gate_access_type += w_2_omega;\\n                         * next_gate_access_type *= eta;\\n                         * next_gate_access_type += w_1_omega;\\n                         * next_gate_access_type *= eta;\\n                         * next_gate_access_type = w_4_omega - next_gate_access_type;\\n                         */\\n                        let next_gate_access_type := mulmod(mload(W3_OMEGA_EVAL_LOC), mload(C_ETA_LOC), p)\\n                        next_gate_access_type := addmod(next_gate_access_type, mload(W2_OMEGA_EVAL_LOC), p)\\n                        next_gate_access_type := mulmod(next_gate_access_type, mload(C_ETA_LOC), p)\\n                        next_gate_access_type := addmod(next_gate_access_type, mload(W1_OMEGA_EVAL_LOC), p)\\n                        next_gate_access_type := mulmod(next_gate_access_type, mload(C_ETA_LOC), p)\\n                        next_gate_access_type := addmod(mload(W4_OMEGA_EVAL_LOC), sub(p, next_gate_access_type), p)\\n\\n                        // value_delta = w_3_omega - w_3\\n                        let value_delta := addmod(mload(W3_OMEGA_EVAL_LOC), sub(p, mload(W3_EVAL_LOC)), p)\\n                        //  adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation = (1 - index_delta) * value_delta * (1 - next_gate_access_type);\\n\\n                        let adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation :=\\n                            mulmod(\\n                                addmod(1, sub(p, index_delta), p),\\n                                mulmod(value_delta, addmod(1, sub(p, next_gate_access_type), p), p),\\n                                p\\n                            )\\n\\n                        // AUX_RAM_CONSISTENCY_EVALUATION\\n\\n                        /**\\n                         * access_type = w_4 - partial_record_check\\n                         * access_check = access_type^2 - access_type\\n                         * next_gate_access_type_is_boolean = next_gate_access_type^2 - next_gate_access_type\\n                         * RAM_consistency_check_identity = adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation;\\n                         * RAM_consistency_check_identity *= alpha;\\n                         * RAM_consistency_check_identity += index_is_monotonically_increasing;\\n                         * RAM_consistency_check_identity *= alpha;\\n                         * RAM_consistency_check_identity += next_gate_access_type_is_boolean;\\n                         * RAM_consistency_check_identity *= alpha;\\n                         * RAM_consistency_check_identity += access_check;\\n                         */\\n\\n                        let access_type := addmod(mload(W4_EVAL_LOC), sub(p, partial_record_check), p)\\n                        let access_check := mulmod(access_type, addmod(access_type, sub(p, 1), p), p)\\n                        let next_gate_access_type_is_boolean :=\\n                            mulmod(next_gate_access_type, addmod(next_gate_access_type, sub(p, 1), p), p)\\n                        let RAM_cci :=\\n                            mulmod(\\n                                adjacent_values_match_if_adjacent_indices_match_and_next_access_is_a_read_operation,\\n                                mload(C_ALPHA_LOC),\\n                                p\\n                            )\\n                        RAM_cci := addmod(RAM_cci, index_is_monotonically_increasing, p)\\n                        RAM_cci := mulmod(RAM_cci, mload(C_ALPHA_LOC), p)\\n                        RAM_cci := addmod(RAM_cci, next_gate_access_type_is_boolean, p)\\n                        RAM_cci := mulmod(RAM_cci, mload(C_ALPHA_LOC), p)\\n                        RAM_cci := addmod(RAM_cci, access_check, p)\\n\\n                        mstore(AUX_RAM_CONSISTENCY_EVALUATION, RAM_cci)\\n                    }\\n\\n                    {\\n                        // timestamp_delta = w_2_omega - w_2\\n                        let timestamp_delta := addmod(mload(W2_OMEGA_EVAL_LOC), sub(p, mload(W2_EVAL_LOC)), p)\\n\\n                        // RAM_timestamp_check_identity = (1 - index_delta) * timestamp_delta - w_3\\n                        let RAM_timestamp_check_identity :=\\n                            addmod(\\n                                mulmod(timestamp_delta, addmod(1, sub(p, index_delta), p), p), sub(p, mload(W3_EVAL_LOC)), p\\n                            )\\n\\n                        /**\\n                         * memory_identity = ROM_consistency_check_identity * q_2;\\n                         * memory_identity += RAM_timestamp_check_identity * q_4;\\n                         * memory_identity += memory_record_check * q_m;\\n                         * memory_identity *= q_1;\\n                         * memory_identity += (RAM_consistency_check_identity * q_arith);\\n                         *\\n                         * auxiliary_identity = memory_identity + non_native_field_identity + limb_accumulator_identity;\\n                         * auxiliary_identity *= q_aux;\\n                         * auxiliary_identity *= alpha_base;\\n                         */\\n                        let memory_identity := mulmod(mload(AUX_ROM_CONSISTENCY_EVALUATION), mload(Q2_EVAL_LOC), p)\\n                        memory_identity :=\\n                            addmod(memory_identity, mulmod(RAM_timestamp_check_identity, mload(Q4_EVAL_LOC), p), p)\\n                        memory_identity :=\\n                            addmod(memory_identity, mulmod(mload(AUX_MEMORY_EVALUATION), mload(QM_EVAL_LOC), p), p)\\n                        memory_identity := mulmod(memory_identity, mload(Q1_EVAL_LOC), p)\\n                        memory_identity :=\\n                            addmod(\\n                                memory_identity, mulmod(mload(AUX_RAM_CONSISTENCY_EVALUATION), mload(QARITH_EVAL_LOC), p), p\\n                            )\\n\\n                        let auxiliary_identity := addmod(memory_identity, mload(AUX_NON_NATIVE_FIELD_EVALUATION), p)\\n                        auxiliary_identity := addmod(auxiliary_identity, mload(AUX_LIMB_ACCUMULATOR_EVALUATION), p)\\n                        auxiliary_identity := mulmod(auxiliary_identity, mload(QAUX_EVAL_LOC), p)\\n                        auxiliary_identity := mulmod(auxiliary_identity, mload(C_ALPHA_BASE_LOC), p)\\n\\n                        mstore(AUX_IDENTITY, auxiliary_identity)\\n\\n                        // update alpha\\n                        mstore(C_ALPHA_BASE_LOC, mulmod(mload(C_ALPHA_BASE_LOC), mload(C_ALPHA_CUBE_LOC), p))\\n                    }\\n                }\\n            }\\n\\n            {\\n                /**\\n                 * quotient = ARITHMETIC_IDENTITY\\n                 * quotient += PERMUTATION_IDENTITY\\n                 * quotient += PLOOKUP_IDENTITY\\n                 * quotient += SORT_IDENTITY\\n                 * quotient += ELLIPTIC_IDENTITY\\n                 * quotient += AUX_IDENTITY\\n                 * quotient *= ZERO_POLY_INVERSE\\n                 */\\n                mstore(\\n                    QUOTIENT_EVAL_LOC,\\n                    mulmod(\\n                        addmod(\\n                            addmod(\\n                                addmod(\\n                                    addmod(\\n                                        addmod(mload(PERMUTATION_IDENTITY), mload(PLOOKUP_IDENTITY), p),\\n                                        mload(ARITHMETIC_IDENTITY),\\n                                        p\\n                                    ),\\n                                    mload(SORT_IDENTITY),\\n                                    p\\n                                ),\\n                                mload(ELLIPTIC_IDENTITY),\\n                                p\\n                            ),\\n                            mload(AUX_IDENTITY),\\n                            p\\n                        ),\\n                        mload(ZERO_POLY_INVERSE_LOC),\\n                        p\\n                    )\\n                )\\n            }\\n\\n            /**\\n             * GENERATE NU AND SEPARATOR CHALLENGES\\n             */\\n            {\\n                let current_challenge := mload(C_CURRENT_LOC)\\n                // get a calldata pointer that points to the start of the data we want to copy\\n                let calldata_ptr := add(calldataload(0x04), 0x24)\\n\\n                calldata_ptr := add(calldata_ptr, NU_CALLDATA_SKIP_LENGTH)\\n\\n                mstore(NU_CHALLENGE_INPUT_LOC_A, current_challenge)\\n                mstore(NU_CHALLENGE_INPUT_LOC_B, mload(QUOTIENT_EVAL_LOC))\\n                calldatacopy(NU_CHALLENGE_INPUT_LOC_C, calldata_ptr, NU_INPUT_LENGTH)\\n\\n                // hash length = (0x20 + num field elements), we include the previous challenge in the hash\\n                let challenge := keccak256(NU_CHALLENGE_INPUT_LOC_A, add(NU_INPUT_LENGTH, 0x40))\\n\\n                mstore(C_V0_LOC, mod(challenge, p))\\n                // We need THIRTY-ONE independent nu challenges!\\n                mstore(0x00, challenge)\\n                mstore8(0x20, 0x01)\\n                mstore(C_V1_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x02)\\n                mstore(C_V2_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x03)\\n                mstore(C_V3_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x04)\\n                mstore(C_V4_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x05)\\n                mstore(C_V5_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x06)\\n                mstore(C_V6_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x07)\\n                mstore(C_V7_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x08)\\n                mstore(C_V8_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x09)\\n                mstore(C_V9_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x0a)\\n                mstore(C_V10_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x0b)\\n                mstore(C_V11_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x0c)\\n                mstore(C_V12_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x0d)\\n                mstore(C_V13_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x0e)\\n                mstore(C_V14_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x0f)\\n                mstore(C_V15_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x10)\\n                mstore(C_V16_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x11)\\n                mstore(C_V17_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x12)\\n                mstore(C_V18_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x13)\\n                mstore(C_V19_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x14)\\n                mstore(C_V20_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x15)\\n                mstore(C_V21_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x16)\\n                mstore(C_V22_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x17)\\n                mstore(C_V23_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x18)\\n                mstore(C_V24_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x19)\\n                mstore(C_V25_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x1a)\\n                mstore(C_V26_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x1b)\\n                mstore(C_V27_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x1c)\\n                mstore(C_V28_LOC, mod(keccak256(0x00, 0x21), p))\\n                mstore8(0x20, 0x1d)\\n                mstore(C_V29_LOC, mod(keccak256(0x00, 0x21), p))\\n\\n                // @follow-up - Why are both v29 and v30 using appending 0x1d to the prior challenge and hashing, should it not change?\\n                mstore8(0x20, 0x1d)\\n                challenge := keccak256(0x00, 0x21)\\n                mstore(C_V30_LOC, mod(challenge, p))\\n\\n                // separator\\n                mstore(0x00, challenge)\\n                mstore(0x20, mload(PI_Z_Y_LOC))\\n                mstore(0x40, mload(PI_Z_X_LOC))\\n                mstore(0x60, mload(PI_Z_OMEGA_Y_LOC))\\n                mstore(0x80, mload(PI_Z_OMEGA_X_LOC))\\n\\n                mstore(C_U_LOC, mod(keccak256(0x00, 0xa0), p))\\n            }\\n\\n            let success := 0\\n            // VALIDATE T1\\n            {\\n                let x := mload(T1_X_LOC)\\n                let y := mload(T1_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q))\\n                mstore(ACCUMULATOR_X_LOC, x)\\n                mstore(add(ACCUMULATOR_X_LOC, 0x20), y)\\n            }\\n            // VALIDATE T2\\n            {\\n                let x := mload(T2_X_LOC) // 0x1400\\n                let y := mload(T2_Y_LOC) // 0x1420\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(ZETA_POW_N_LOC))\\n            // accumulator_2 = [T2].zeta^n\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = [T1] + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE T3\\n            {\\n                let x := mload(T3_X_LOC)\\n                let y := mload(T3_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mulmod(mload(ZETA_POW_N_LOC), mload(ZETA_POW_N_LOC), p))\\n            // accumulator_2 = [T3].zeta^{2n}\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE T4\\n            {\\n                let x := mload(T4_X_LOC)\\n                let y := mload(T4_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mulmod(mulmod(mload(ZETA_POW_N_LOC), mload(ZETA_POW_N_LOC), p), mload(ZETA_POW_N_LOC), p))\\n            // accumulator_2 = [T4].zeta^{3n}\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE W1\\n            {\\n                let x := mload(W1_X_LOC)\\n                let y := mload(W1_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mulmod(addmod(mload(C_U_LOC), 0x1, p), mload(C_V0_LOC), p))\\n            // accumulator_2 = v0.(u + 1).[W1]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE W2\\n            {\\n                let x := mload(W2_X_LOC)\\n                let y := mload(W2_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mulmod(addmod(mload(C_U_LOC), 0x1, p), mload(C_V1_LOC), p))\\n            // accumulator_2 = v1.(u + 1).[W2]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE W3\\n            {\\n                let x := mload(W3_X_LOC)\\n                let y := mload(W3_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mulmod(addmod(mload(C_U_LOC), 0x1, p), mload(C_V2_LOC), p))\\n            // accumulator_2 = v2.(u + 1).[W3]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE W4\\n            {\\n                let x := mload(W4_X_LOC)\\n                let y := mload(W4_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mulmod(addmod(mload(C_U_LOC), 0x1, p), mload(C_V3_LOC), p))\\n            // accumulator_2 = v3.(u + 1).[W4]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE S\\n            {\\n                let x := mload(S_X_LOC)\\n                let y := mload(S_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mulmod(addmod(mload(C_U_LOC), 0x1, p), mload(C_V4_LOC), p))\\n            // accumulator_2 = v4.(u + 1).[S]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE Z\\n            {\\n                let x := mload(Z_X_LOC)\\n                let y := mload(Z_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mulmod(addmod(mload(C_U_LOC), 0x1, p), mload(C_V5_LOC), p))\\n            // accumulator_2 = v5.(u + 1).[Z]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE Z_LOOKUP\\n            {\\n                let x := mload(Z_LOOKUP_X_LOC)\\n                let y := mload(Z_LOOKUP_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mulmod(addmod(mload(C_U_LOC), 0x1, p), mload(C_V6_LOC), p))\\n            // accumulator_2 = v6.(u + 1).[Z_LOOKUP]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE Q1\\n            {\\n                let x := mload(Q1_X_LOC)\\n                let y := mload(Q1_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(C_V7_LOC))\\n            // accumulator_2 = v7.[Q1]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE Q2\\n            {\\n                let x := mload(Q2_X_LOC)\\n                let y := mload(Q2_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(C_V8_LOC))\\n            // accumulator_2 = v8.[Q2]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE Q3\\n            {\\n                let x := mload(Q3_X_LOC)\\n                let y := mload(Q3_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(C_V9_LOC))\\n            // accumulator_2 = v9.[Q3]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE Q4\\n            {\\n                let x := mload(Q4_X_LOC)\\n                let y := mload(Q4_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(C_V10_LOC))\\n            // accumulator_2 = v10.[Q4]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE QM\\n            {\\n                let x := mload(QM_X_LOC)\\n                let y := mload(QM_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(C_V11_LOC))\\n            // accumulator_2 = v11.[Q;]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE QC\\n            {\\n                let x := mload(QC_X_LOC)\\n                let y := mload(QC_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(C_V12_LOC))\\n            // accumulator_2 = v12.[QC]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE QARITH\\n            {\\n                let x := mload(QARITH_X_LOC)\\n                let y := mload(QARITH_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(C_V13_LOC))\\n            // accumulator_2 = v13.[QARITH]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE QSORT\\n            {\\n                let x := mload(QSORT_X_LOC)\\n                let y := mload(QSORT_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(C_V14_LOC))\\n            // accumulator_2 = v14.[QSORT]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE QELLIPTIC\\n            {\\n                let x := mload(QELLIPTIC_X_LOC)\\n                let y := mload(QELLIPTIC_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(C_V15_LOC))\\n            // accumulator_2 = v15.[QELLIPTIC]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE QAUX\\n            {\\n                let x := mload(QAUX_X_LOC)\\n                let y := mload(QAUX_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(C_V16_LOC))\\n            // accumulator_2 = v15.[Q_AUX]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE SIGMA1\\n            {\\n                let x := mload(SIGMA1_X_LOC)\\n                let y := mload(SIGMA1_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(C_V17_LOC))\\n            // accumulator_2 = v17.[sigma1]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE SIGMA2\\n            {\\n                let x := mload(SIGMA2_X_LOC)\\n                let y := mload(SIGMA2_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(C_V18_LOC))\\n            // accumulator_2 = v18.[sigma2]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE SIGMA3\\n            {\\n                let x := mload(SIGMA3_X_LOC)\\n                let y := mload(SIGMA3_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(C_V19_LOC))\\n            // accumulator_2 = v19.[sigma3]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE SIGMA4\\n            {\\n                let x := mload(SIGMA4_X_LOC)\\n                let y := mload(SIGMA4_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(C_V20_LOC))\\n            // accumulator_2 = v20.[sigma4]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE TABLE1\\n            {\\n                let x := mload(TABLE1_X_LOC)\\n                let y := mload(TABLE1_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mulmod(addmod(mload(C_U_LOC), 0x1, p), mload(C_V21_LOC), p))\\n            // accumulator_2 = u.[table1]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE TABLE2\\n            {\\n                let x := mload(TABLE2_X_LOC)\\n                let y := mload(TABLE2_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mulmod(addmod(mload(C_U_LOC), 0x1, p), mload(C_V22_LOC), p))\\n            // accumulator_2 = u.[table2]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE TABLE3\\n            {\\n                let x := mload(TABLE3_X_LOC)\\n                let y := mload(TABLE3_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mulmod(addmod(mload(C_U_LOC), 0x1, p), mload(C_V23_LOC), p))\\n            // accumulator_2 = u.[table3]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE TABLE4\\n            {\\n                let x := mload(TABLE4_X_LOC)\\n                let y := mload(TABLE4_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mulmod(addmod(mload(C_U_LOC), 0x1, p), mload(C_V24_LOC), p))\\n            // accumulator_2 = u.[table4]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE TABLE_TYPE\\n            {\\n                let x := mload(TABLE_TYPE_X_LOC)\\n                let y := mload(TABLE_TYPE_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(C_V25_LOC))\\n            // accumulator_2 = v25.[TableType]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE ID1\\n            {\\n                let x := mload(ID1_X_LOC)\\n                let y := mload(ID1_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(C_V26_LOC))\\n            // accumulator_2 = v26.[ID1]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE ID2\\n            {\\n                let x := mload(ID2_X_LOC)\\n                let y := mload(ID2_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(C_V27_LOC))\\n            // accumulator_2 = v27.[ID2]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE ID3\\n            {\\n                let x := mload(ID3_X_LOC)\\n                let y := mload(ID3_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(C_V28_LOC))\\n            // accumulator_2 = v28.[ID3]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            // VALIDATE ID4\\n            {\\n                let x := mload(ID4_X_LOC)\\n                let y := mload(ID4_Y_LOC)\\n                let xx := mulmod(x, x, q)\\n                // validate on curve\\n                success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            mstore(0x40, mload(C_V29_LOC))\\n            // accumulator_2 = v29.[ID4]\\n            success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n            // accumulator = accumulator + accumulator_2\\n            success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n            /**\\n             * COMPUTE BATCH EVALUATION SCALAR MULTIPLIER\\n             */\\n            {\\n                /**\\n                 * batch_evaluation = v0 * (w_1_omega * u + w_1_eval)\\n                 * batch_evaluation += v1 * (w_2_omega * u + w_2_eval)\\n                 * batch_evaluation += v2 * (w_3_omega * u + w_3_eval)\\n                 * batch_evaluation += v3 * (w_4_omega * u + w_4_eval)\\n                 * batch_evaluation += v4 * (s_omega_eval * u + s_eval)\\n                 * batch_evaluation += v5 * (z_omega_eval * u + z_eval)\\n                 * batch_evaluation += v6 * (z_lookup_omega_eval * u + z_lookup_eval)\\n                 */\\n                let batch_evaluation :=\\n                    mulmod(\\n                        mload(C_V0_LOC),\\n                        addmod(mulmod(mload(W1_OMEGA_EVAL_LOC), mload(C_U_LOC), p), mload(W1_EVAL_LOC), p),\\n                        p\\n                    )\\n                batch_evaluation :=\\n                    addmod(\\n                        batch_evaluation,\\n                        mulmod(\\n                            mload(C_V1_LOC),\\n                            addmod(mulmod(mload(W2_OMEGA_EVAL_LOC), mload(C_U_LOC), p), mload(W2_EVAL_LOC), p),\\n                            p\\n                        ),\\n                        p\\n                    )\\n                batch_evaluation :=\\n                    addmod(\\n                        batch_evaluation,\\n                        mulmod(\\n                            mload(C_V2_LOC),\\n                            addmod(mulmod(mload(W3_OMEGA_EVAL_LOC), mload(C_U_LOC), p), mload(W3_EVAL_LOC), p),\\n                            p\\n                        ),\\n                        p\\n                    )\\n                batch_evaluation :=\\n                    addmod(\\n                        batch_evaluation,\\n                        mulmod(\\n                            mload(C_V3_LOC),\\n                            addmod(mulmod(mload(W4_OMEGA_EVAL_LOC), mload(C_U_LOC), p), mload(W4_EVAL_LOC), p),\\n                            p\\n                        ),\\n                        p\\n                    )\\n                batch_evaluation :=\\n                    addmod(\\n                        batch_evaluation,\\n                        mulmod(\\n                            mload(C_V4_LOC),\\n                            addmod(mulmod(mload(S_OMEGA_EVAL_LOC), mload(C_U_LOC), p), mload(S_EVAL_LOC), p),\\n                            p\\n                        ),\\n                        p\\n                    )\\n                batch_evaluation :=\\n                    addmod(\\n                        batch_evaluation,\\n                        mulmod(\\n                            mload(C_V5_LOC),\\n                            addmod(mulmod(mload(Z_OMEGA_EVAL_LOC), mload(C_U_LOC), p), mload(Z_EVAL_LOC), p),\\n                            p\\n                        ),\\n                        p\\n                    )\\n                batch_evaluation :=\\n                    addmod(\\n                        batch_evaluation,\\n                        mulmod(\\n                            mload(C_V6_LOC),\\n                            addmod(mulmod(mload(Z_LOOKUP_OMEGA_EVAL_LOC), mload(C_U_LOC), p), mload(Z_LOOKUP_EVAL_LOC), p),\\n                            p\\n                        ),\\n                        p\\n                    )\\n\\n                /**\\n                 * batch_evaluation += v7 * Q1_EVAL\\n                 * batch_evaluation += v8 * Q2_EVAL\\n                 * batch_evaluation += v9 * Q3_EVAL\\n                 * batch_evaluation += v10 * Q4_EVAL\\n                 * batch_evaluation += v11 * QM_EVAL\\n                 * batch_evaluation += v12 * QC_EVAL\\n                 * batch_evaluation += v13 * QARITH_EVAL\\n                 * batch_evaluation += v14 * QSORT_EVAL_LOC\\n                 * batch_evaluation += v15 * QELLIPTIC_EVAL_LOC\\n                 * batch_evaluation += v16 * QAUX_EVAL_LOC\\n                 * batch_evaluation += v17 * SIGMA1_EVAL_LOC\\n                 * batch_evaluation += v18 * SIGMA2_EVAL_LOC\\n                 * batch_evaluation += v19 * SIGMA3_EVAL_LOC\\n                 * batch_evaluation += v20 * SIGMA4_EVAL_LOC\\n                 */\\n                batch_evaluation := addmod(batch_evaluation, mulmod(mload(C_V7_LOC), mload(Q1_EVAL_LOC), p), p)\\n                batch_evaluation := addmod(batch_evaluation, mulmod(mload(C_V8_LOC), mload(Q2_EVAL_LOC), p), p)\\n                batch_evaluation := addmod(batch_evaluation, mulmod(mload(C_V9_LOC), mload(Q3_EVAL_LOC), p), p)\\n                batch_evaluation := addmod(batch_evaluation, mulmod(mload(C_V10_LOC), mload(Q4_EVAL_LOC), p), p)\\n                batch_evaluation := addmod(batch_evaluation, mulmod(mload(C_V11_LOC), mload(QM_EVAL_LOC), p), p)\\n                batch_evaluation := addmod(batch_evaluation, mulmod(mload(C_V12_LOC), mload(QC_EVAL_LOC), p), p)\\n                batch_evaluation := addmod(batch_evaluation, mulmod(mload(C_V13_LOC), mload(QARITH_EVAL_LOC), p), p)\\n                batch_evaluation := addmod(batch_evaluation, mulmod(mload(C_V14_LOC), mload(QSORT_EVAL_LOC), p), p)\\n                batch_evaluation := addmod(batch_evaluation, mulmod(mload(C_V15_LOC), mload(QELLIPTIC_EVAL_LOC), p), p)\\n                batch_evaluation := addmod(batch_evaluation, mulmod(mload(C_V16_LOC), mload(QAUX_EVAL_LOC), p), p)\\n                batch_evaluation := addmod(batch_evaluation, mulmod(mload(C_V17_LOC), mload(SIGMA1_EVAL_LOC), p), p)\\n                batch_evaluation := addmod(batch_evaluation, mulmod(mload(C_V18_LOC), mload(SIGMA2_EVAL_LOC), p), p)\\n                batch_evaluation := addmod(batch_evaluation, mulmod(mload(C_V19_LOC), mload(SIGMA3_EVAL_LOC), p), p)\\n                batch_evaluation := addmod(batch_evaluation, mulmod(mload(C_V20_LOC), mload(SIGMA4_EVAL_LOC), p), p)\\n\\n                /**\\n                 * batch_evaluation += v21 * (table1(zw) * u + table1(z))\\n                 * batch_evaluation += v22 * (table2(zw) * u + table2(z))\\n                 * batch_evaluation += v23 * (table3(zw) * u + table3(z))\\n                 * batch_evaluation += v24 * (table4(zw) * u + table4(z))\\n                 * batch_evaluation += v25 * table_type_eval\\n                 * batch_evaluation += v26 * id1_eval\\n                 * batch_evaluation += v27 * id2_eval\\n                 * batch_evaluation += v28 * id3_eval\\n                 * batch_evaluation += v29 * id4_eval\\n                 * batch_evaluation += quotient_eval\\n                 */\\n                batch_evaluation :=\\n                    addmod(\\n                        batch_evaluation,\\n                        mulmod(\\n                            mload(C_V21_LOC),\\n                            addmod(mulmod(mload(TABLE1_OMEGA_EVAL_LOC), mload(C_U_LOC), p), mload(TABLE1_EVAL_LOC), p),\\n                            p\\n                        ),\\n                        p\\n                    )\\n                batch_evaluation :=\\n                    addmod(\\n                        batch_evaluation,\\n                        mulmod(\\n                            mload(C_V22_LOC),\\n                            addmod(mulmod(mload(TABLE2_OMEGA_EVAL_LOC), mload(C_U_LOC), p), mload(TABLE2_EVAL_LOC), p),\\n                            p\\n                        ),\\n                        p\\n                    )\\n                batch_evaluation :=\\n                    addmod(\\n                        batch_evaluation,\\n                        mulmod(\\n                            mload(C_V23_LOC),\\n                            addmod(mulmod(mload(TABLE3_OMEGA_EVAL_LOC), mload(C_U_LOC), p), mload(TABLE3_EVAL_LOC), p),\\n                            p\\n                        ),\\n                        p\\n                    )\\n                batch_evaluation :=\\n                    addmod(\\n                        batch_evaluation,\\n                        mulmod(\\n                            mload(C_V24_LOC),\\n                            addmod(mulmod(mload(TABLE4_OMEGA_EVAL_LOC), mload(C_U_LOC), p), mload(TABLE4_EVAL_LOC), p),\\n                            p\\n                        ),\\n                        p\\n                    )\\n                batch_evaluation := addmod(batch_evaluation, mulmod(mload(C_V25_LOC), mload(TABLE_TYPE_EVAL_LOC), p), p)\\n                batch_evaluation := addmod(batch_evaluation, mulmod(mload(C_V26_LOC), mload(ID1_EVAL_LOC), p), p)\\n                batch_evaluation := addmod(batch_evaluation, mulmod(mload(C_V27_LOC), mload(ID2_EVAL_LOC), p), p)\\n                batch_evaluation := addmod(batch_evaluation, mulmod(mload(C_V28_LOC), mload(ID3_EVAL_LOC), p), p)\\n                batch_evaluation := addmod(batch_evaluation, mulmod(mload(C_V29_LOC), mload(ID4_EVAL_LOC), p), p)\\n                batch_evaluation := addmod(batch_evaluation, mload(QUOTIENT_EVAL_LOC), p)\\n\\n                mstore(0x00, 0x01) // [1].x\\n                mstore(0x20, 0x02) // [1].y\\n                mstore(0x40, sub(p, batch_evaluation))\\n                // accumulator_2 = -[1].(batch_evaluation)\\n                success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n                // accumulator = accumulator + accumulator_2\\n                success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n                mstore(OPENING_COMMITMENT_SUCCESS_FLAG, success)\\n            }\\n\\n            /**\\n             * PERFORM PAIRING PREAMBLE\\n             */\\n            {\\n                let u := mload(C_U_LOC)\\n                let zeta := mload(C_ZETA_LOC)\\n                // VALIDATE PI_Z\\n                {\\n                    let x := mload(PI_Z_X_LOC)\\n                    let y := mload(PI_Z_Y_LOC)\\n                    let xx := mulmod(x, x, q)\\n                    // validate on curve\\n                    success := eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q))\\n                    mstore(0x00, x)\\n                    mstore(0x20, y)\\n                }\\n                // compute zeta.[PI_Z] and add into accumulator\\n                mstore(0x40, zeta)\\n                success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n                // accumulator = accumulator + accumulator_2\\n                success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, ACCUMULATOR_X_LOC, 0x40))\\n\\n                // VALIDATE PI_Z_OMEGA\\n                {\\n                    let x := mload(PI_Z_OMEGA_X_LOC)\\n                    let y := mload(PI_Z_OMEGA_Y_LOC)\\n                    let xx := mulmod(x, x, q)\\n                    // validate on curve\\n                    success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                    mstore(0x00, x)\\n                    mstore(0x20, y)\\n                }\\n                mstore(0x40, mulmod(mulmod(u, zeta, p), mload(OMEGA_LOC), p))\\n                // accumulator_2 = u.zeta.omega.[PI_Z_OMEGA]\\n                success := and(success, staticcall(gas(), 7, 0x00, 0x60, ACCUMULATOR2_X_LOC, 0x40))\\n                // PAIRING_RHS = accumulator + accumulator_2\\n                success := and(success, staticcall(gas(), 6, ACCUMULATOR_X_LOC, 0x80, PAIRING_RHS_X_LOC, 0x40))\\n\\n                mstore(0x00, mload(PI_Z_X_LOC))\\n                mstore(0x20, mload(PI_Z_Y_LOC))\\n                mstore(0x40, mload(PI_Z_OMEGA_X_LOC))\\n                mstore(0x60, mload(PI_Z_OMEGA_Y_LOC))\\n                mstore(0x80, u)\\n                success := and(success, staticcall(gas(), 7, 0x40, 0x60, 0x40, 0x40))\\n                // PAIRING_LHS = [PI_Z] + [PI_Z_OMEGA] * u\\n                success := and(success, staticcall(gas(), 6, 0x00, 0x80, PAIRING_LHS_X_LOC, 0x40))\\n                // negate lhs y-coordinate\\n                mstore(PAIRING_LHS_Y_LOC, sub(q, mload(PAIRING_LHS_Y_LOC)))\\n\\n                if mload(CONTAINS_RECURSIVE_PROOF_LOC) {\\n                    // VALIDATE RECURSIVE P1\\n                    {\\n                        let x := mload(RECURSIVE_P1_X_LOC)\\n                        let y := mload(RECURSIVE_P1_Y_LOC)\\n                        let xx := mulmod(x, x, q)\\n                        // validate on curve\\n                        success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                        mstore(0x00, x)\\n                        mstore(0x20, y)\\n                    }\\n\\n                    // compute u.u.[recursive_p1] and write into 0x60\\n                    mstore(0x40, mulmod(u, u, p))\\n                    success := and(success, staticcall(gas(), 7, 0x00, 0x60, 0x60, 0x40))\\n                    // VALIDATE RECURSIVE P2\\n                    {\\n                        let x := mload(RECURSIVE_P2_X_LOC)\\n                        let y := mload(RECURSIVE_P2_Y_LOC)\\n                        let xx := mulmod(x, x, q)\\n                        // validate on curve\\n                        success := and(success, eq(mulmod(y, y, q), addmod(mulmod(x, xx, q), 3, q)))\\n                        mstore(0x00, x)\\n                        mstore(0x20, y)\\n                    }\\n                    // compute u.u.[recursive_p2] and write into 0x00\\n                    // 0x40 still contains u*u\\n                    success := and(success, staticcall(gas(), 7, 0x00, 0x60, 0x00, 0x40))\\n\\n                    // compute u.u.[recursiveP1] + rhs and write into rhs\\n                    mstore(0xa0, mload(PAIRING_RHS_X_LOC))\\n                    mstore(0xc0, mload(PAIRING_RHS_Y_LOC))\\n                    success := and(success, staticcall(gas(), 6, 0x60, 0x80, PAIRING_RHS_X_LOC, 0x40))\\n\\n                    // compute u.u.[recursiveP2] + lhs and write into lhs\\n                    mstore(0x40, mload(PAIRING_LHS_X_LOC))\\n                    mstore(0x60, mload(PAIRING_LHS_Y_LOC))\\n                    success := and(success, staticcall(gas(), 6, 0x00, 0x80, PAIRING_LHS_X_LOC, 0x40))\\n                }\\n\\n                if iszero(success) {\\n                    mstore(0x0, EC_SCALAR_MUL_FAILURE_SELECTOR)\\n                    revert(0x00, 0x04)\\n                }\\n                mstore(PAIRING_PREAMBLE_SUCCESS_FLAG, success)\\n            }\\n\\n            /**\\n             * PERFORM PAIRING\\n             */\\n            {\\n                // rhs paired with [1]_2\\n                // lhs paired with [x]_2\\n\\n                mstore(0x00, mload(PAIRING_RHS_X_LOC))\\n                mstore(0x20, mload(PAIRING_RHS_Y_LOC))\\n                mstore(0x40, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2) // this is [1]_2\\n                mstore(0x60, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)\\n                mstore(0x80, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)\\n                mstore(0xa0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)\\n\\n                mstore(0xc0, mload(PAIRING_LHS_X_LOC))\\n                mstore(0xe0, mload(PAIRING_LHS_Y_LOC))\\n                mstore(0x100, mload(G2X_X0_LOC))\\n                mstore(0x120, mload(G2X_X1_LOC))\\n                mstore(0x140, mload(G2X_Y0_LOC))\\n                mstore(0x160, mload(G2X_Y1_LOC))\\n\\n                success := staticcall(gas(), 8, 0x00, 0x180, 0x00, 0x20)\\n                mstore(PAIRING_SUCCESS_FLAG, success)\\n                mstore(RESULT_FLAG, mload(0x00))\\n            }\\n            if iszero(\\n                and(\\n                    and(and(mload(PAIRING_SUCCESS_FLAG), mload(RESULT_FLAG)), mload(PAIRING_PREAMBLE_SUCCESS_FLAG)),\\n                    mload(OPENING_COMMITMENT_SUCCESS_FLAG)\\n                )\\n            ) {\\n                mstore(0x0, PROOF_FAILURE_SELECTOR)\\n                revert(0x00, 0x04)\\n            }\\n            {\\n                mstore(0x00, 0x01)\\n                return(0x00, 0x20) // Proof succeeded!\\n            }\\n        }\\n    }\\n}\\n\\ncontract RecoveryUltraVerifier is RecoveryBaseUltraVerifier {\\n    function getVerificationKeyHash() public pure override(RecoveryBaseUltraVerifier) returns (bytes32) {\\n        return RecoveryUltraVerificationKey.verificationKeyHash();\\n    }\\n\\n    function loadVerificationKey(uint256 vk, uint256 _omegaInverseLoc) internal pure virtual override(RecoveryBaseUltraVerifier) {\\n        RecoveryUltraVerificationKey.loadVerificationKey(vk, _omegaInverseLoc);\\n    }\\n}\\n\",\"keccak256\":\"0x628d587b4ea0c525e71b8d22e2143fc9da0d464569ad550a9b15b2f7bd9c1c14\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6080604052346200001d575b604051614f176200002d8239614f1790f35b62000026600080fd5b6200000b56fe60806040526004361015610018575b610016600080fd5b005b60003560e01c8063937f6a10146100405763ea50d0e40361000e5761003b6101a7565b61000e565b5061003b61005e565b600091031261005457565b61005c600080fd5b565b503461008f575b610070366004610049565b61008b61007b614646565b6040519182918290815260200190565b0390f35b610097600080fd5b610065565b909182601f830112156100d8575b602082359267ffffffffffffffff84116100cb575b01928284011161005457565b6100d3600080fd5b6100bf565b6100e0600080fd5b6100aa565b909182601f83011215610124575b602082359267ffffffffffffffff8411610117575b01926020830284011161005457565b61011f600080fd5b610108565b61012c600080fd5b6100f3565b9160408383031261019a575b61017c61015d83853567ffffffffffffffff811161018d575b860161009c565b93909460208101359067ffffffffffffffff8211610180575b016100e5565b9091565b610188600080fd5b610176565b610195600080fd5b610156565b6101a2600080fd5b61013d565b346101c7575b6101c46101bb366004610131565b9291909161020d565b50565b6101cf600080fd5b6101ad565b6101e16101e16101e19290565b90565b6101e16103806101d4565b6101e16134006101d4565b90815260408101929161005c9160200152565b505091506102409061021d600090565b506102376102296101e4565b6102316101ef565b90614672565b6103a051925090565b90818103614620577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476024600435018181350661122052816020820135066112005281604082013506611260528160608201350661124052816080820135066112a0528160a082013506611280528160c0820135066112e0528160e0820135066112c05281610100820135066113205281610120820135066113005281610140820135066113605281610160820135066113405281610180820135066113a052816101a08201350661138052816101c0820135066113e052816101e0820135066113c05281610200820135066114205281610220820135066114005281610240820135066114605281610260820135066114405281610280820135066114a052816102a08201350661148052600080516020614ea28339815191526102c08201350661160052600080516020614ea28339815191526102e08201350661162052600080516020614ea28339815191526103008201350661164052600080516020614ea28339815191526103208201350661166052600080516020614ea28339815191526103408201350661168052600080516020614ea2833981519152610360820135066116a052600080516020614ea2833981519152610380820135066116c052600080516020614ea28339815191526103a0820135066116e052600080516020614ea28339815191526103c08201350661170052600080516020614ea28339815191526103e08201350661172052600080516020614ea28339815191526104008201350661174052600080516020614ea28339815191526104208201350661176052600080516020614ea28339815191526104408201350661178052600080516020614ea2833981519152610460820135066117a052600080516020614ea2833981519152610480820135066117c052600080516020614ea28339815191526104a0820135066117e052600080516020614ea28339815191526104c08201350661180052600080516020614ea28339815191526104e08201350661196052600080516020614ea28339815191526105008201350661198052600080516020614ea2833981519152610520820135066119a052600080516020614ea2833981519152610540820135066119c052600080516020614ea28339815191526105608201350661184052600080516020614ea28339815191526105808201350661186052600080516020614ea28339815191526105a08201350661188052600080516020614ea28339815191526105c0820135066118a052600080516020614ea28339815191526105e0820135066118c052600080516020614ea2833981519152610600820135066118e052600080516020614ea28339815191526106208201350661190052600080516020614ea28339815191526106408201350661192052600080516020614ea28339815191526106608201350661194052600080516020614ea2833981519152610680820135066119e052600080516020614ea28339815191526106a08201350661200052600080516020614ea28339815191526106c08201350661202052600080516020614ea28339815191526106e08201350661204052600080516020614ea28339815191526107008201350661206052600080516020614ea28339815191526107208201350661208052600080516020614ea2833981519152610740820135066120a052600080516020614ea2833981519152610760820135066120c052600080516020614ea2833981519152610780820135066120e052600080516020614ea28339815191526107a08201350661210052600080516020614ea28339815191526107c08201350661212052816107e082013506612320528161080082013506612300528161082082013506612360528161084082013506612340526109c051614556575b6103805160e01b6000526103a05160e01b600452600860002061358052602480350160c060206103a0510280836020613580013781846135a08301370160200161358020600080516020614ea28339815191528082068061266052818180096126805261268051096126a0526000526112e0516020526112c051604052611320516060526113005160805260a0600020600080516020614ea283398151915281066126005260005260016020536021600020600080516020614ea283398151915281066126205260005261136051602052611340516040526113a0516060526113805160805260a0600020600080516020614ea283398151915281066126405261264051600080516020614ea283398151915281800961342052600080516020614ea283398151915281613420510961344052600080516020614ea283398151915281613440510961346052613480526000526113e0516020526113c05160405261142051606052611400516080526114605160a0526114405160c0526114a05160e0526114805161010052610120600020600080516020614ea283398151915281066126c0526126e05261260051612620516103c05160019283946001938160206103a051020192600080516020614ea2833981519152600c81600584099209905b8484106144c757505050505050156144b6576130005261302052600080516020614ea28339815191528060016126005108612620510980610380516001905b808210614499575050600080516020614ea28339815191529182916131005280098009613120526126c0518061038051906001915b80831061447c5750613040819052600080516020614ea28339815191529150600080516020614ec2833981519152900861340051600080516020614ea283398151915283818084810394818082816103e0519981808481848d089309809a08900996099481868b0890099309860890096103c05193600080516020614ea28339815191528580099161302051600080516020614ea283398151915282820993600080516020614ea283398151915287860991600080516020614ea28339815191528381600080516020614ec28339815191528808900995600080516020614ea28339815191528761312051900993600080516020614ea2833981519152856020600052602080526020604052818d818b816001810393818c800909090890096060527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff608052600080516020614ea283398151915260a0526020600060c08160055afa1561446b57899486948860005192600080516020614ea28339815191529084099d600080516020614ec283398151915292600080516020614ea283398151915290800990600080516020614ea2833981519152910990600080516020614ea2833981519152910990600080516020614ea28339815191529108600080516020614ea2833981519152910997600080516020614ea28339815191529089099761312051600080516020614ea2833981519152910990600080516020614ea283398151915290820996600080516020614ea283398151915290600080516020614ec28339815191529008600080516020614ea2833981519152910990600080516020614ea283398151915290820993600080516020614ea2833981519152910990600080516020614ea283398151915290820991600080516020614ea28339815191529109613020519080600080516020614ea2833981519152910990600080516020614ea283398151915291096130005190600080516020614ea2833981519152910961306052600080516020614ea283398151915290870961308052600080516020614ea2833981519152910961378052600080516020614ea283398151915283850990600080516020614ea283398151915291096130a0526131005190600080516020614ea2833981519152910961314052600080516020614ea2833981519152910990600080516020614ea283398151915291096130c052612600516126205161190051600080516020614ea2833981519152908309816116205101016118e051600080516020614ea28339815191529084098261160051010190600080516020614ea2833981519152910961194051600080516020614ea28339815191529084098261166051010161192051600080516020614ea28339815191529085098361164051010190600080516020614ea28339815191529109600080516020614ea283398151915291096116a05190600080516020614ea283398151915291096134805190600080516020614ea283398151915291099161198051600080516020614ea28339815191529082098261162051010161196051600080516020614ea28339815191529083098361160051010190600080516020614ea28339815191529109916119c051600080516020614ea283398151915290830981611660510101916119a051600080516020614ea2833981519152910961164051600080516020614ea28339815191529392010109600080516020614ea283398151915291096120805190600080516020614ea283398151915291096134805190600080516020614ea28339815191529109600080516020614ea283398151915203600080516020614ea28339815191529108612640516134805190600080516020614ea283398151915291096134805261306051600080516020614ea2833981519152036120805190600080516020614ea283398151915291086130c05190600080516020614ea283398151915291096134805190600080516020614ea28339815191529109600080516020614ea28339815191529108612640516134805190600080516020614ea28339815191529109613480526116a051600080516020614ea283398151915290600080516020614ec283398151915290086130a05190600080516020614ea283398151915291096134805190600080516020614ea28339815191529109600080516020614ea2833981519152910861360052612640516134805190600080516020614ea2833981519152910961348052611720516126605190600080516020614ea28339815191529109612020516117805190600080516020614ea283398151915291096116405190600080516020614ea28339815191529108600080516020614ea2833981519152910861266051600080516020614ea28339815191529109612000516117605190600080516020614ea283398151915291096116205190600080516020614ea28339815191529108600080516020614ea2833981519152910861266051600080516020614ea283398151915291096119e0516117005190600080516020614ea283398151915291096116005190600080516020614ea28339815191529108600080516020614ea2833981519152910861184051612660516118605190600080516020614ea28339815191529109612680516118805190600080516020614ea283398151915291096126a0516118a05190600080516020614ea2833981519152910990600080516020614ea2833981519152910890600080516020614ea2833981519152910890600080516020614ea28339815191529108906120c051612660516120e05190600080516020614ea28339815191529109612680516121005190600080516020614ea283398151915291096126a0516121205190600080516020614ea2833981519152910990600080516020614ea2833981519152910890600080516020614ea2833981519152910890600080516020614ea2833981519152910890612600516001600080516020614ea283398151915291086126205190600080516020614ea2833981519152910992839161262051906118c051600080516020614ea2833981519152910990600080516020614ea283398151915291089261260051600080516020614ea28339815191529109600080516020614ea2833981519152910890600080516020614ea28339815191529108600080516020614ea28339815191529109612600516001600080516020614ea28339815191529108600080516020614ea283398151915291096130a0516126405190600080516020614ea283398151915291099081600080516020614ea283398151915291086116c051600080516020614ea2833981519152910990600080516020614ea283398151915203600080516020614ea2833981519152910890612600516120605190600080516020614ea283398151915291096116805190600080516020614ea2833981519152910890600080516020614ea283398151915291086130c0516134205190600080516020614ea283398151915291099081600080516020614ea283398151915203600080516020614ea283398151915291086120a051600080516020614ea283398151915291099061314051600080516020614ea28339815191529109600080516020614ea28339815191529108906134805191600080516020614ea283398151915203600080516020614ea2833981519152910890600080516020614ea2833981519152910961362052613440516134805190600080516020614ea28339815191529109613480526116e0516116005190600080516020614ea28339815191529109611700516116205190600080516020614ea28339815191529109611720516116405190600080516020614ea2833981519152910990611740516116605190600080516020614ea28339815191529109926003600080516020614ea2833981519152036117a05190600080516020614ea2833981519152910861176051611620516116005190600080516020614ea2833981519152910990600080516020614ea2833981519152910990600080516020614ea283398151915291097f183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f8000000600080516020614ea28339815191529109600080516020614ea28339815191529108600080516020614ea28339815191529108600080516020614ea28339815191529108600080516020614ea283398151915291086117805190600080516020614ea28339815191529108611660516116005190600080516020614ea283398151915291086119e051600080516020614ea28339815191520390600080516020614ea283398151915291086117605190600080516020614ea283398151915291086117a051600080516020614ea2833981519152907f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff900890600080516020614ea283398151915291096126405190600080516020614ea283398151915291096120405190600080516020614ea283398151915291086117a051600080516020614ea283398151915290600080516020614ec2833981519152900890600080516020614ea28339815191529109600080516020614ea283398151915291086117a05190600080516020614ea283398151915291096134805190600080516020614ea2833981519152910961364052613420516134805190600080516020614ea283398151915291096134805261160051611620517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff917f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effffffe91600080516020614ea283398151915291820390089161162051600080516020614ea2833981519152036116405190600080516020614ea2833981519152910861164051600080516020614ea2833981519152036116605190600080516020614ea283398151915291089061166051600080516020614ea2833981519152036119e05190600080516020614ea28339815191529108946134805190600080516020614ea283398151915286820890600080516020614ea283398151915286820890600080516020614ea283398151915281810391800990600080516020614ea2833981519152910890600080516020614ea2833981519152910990600080516020614ea2833981519152910990600080516020614ea2833981519152910990612640516134805190600080516020614ea2833981519152910990600080516020614ea283398151915286820890600080516020614ea283398151915286820890600080516020614ea283398151915281810391800990600080516020614ea2833981519152910890600080516020614ea2833981519152910990600080516020614ea2833981519152910990600080516020614ea28339815191529109600080516020614ea2833981519152910890613420516134805190600080516020614ea2833981519152910990600080516020614ea283398151915285820890600080516020614ea283398151915285820890600080516020614ea283398151915281810391800990600080516020614ea2833981519152910890600080516020614ea2833981519152910990600080516020614ea2833981519152910990600080516020614ea28339815191529109600080516020614ea2833981519152910892613440516134805190600080516020614ea2833981519152910992600080516020614ea283398151915290820891600080516020614ea283398151915290820890600080516020614ea283398151915281810391800990600080516020614ea2833981519152910890600080516020614ea2833981519152910990600080516020614ea2833981519152910990600080516020614ea28339815191529109600080516020614ea283398151915291086117c051600080516020614ea2833981519152910961366052613460516134805190600080516020614ea283398151915291096134805261162051600080516020614ea2833981519152036119e05190600080516020614ea2833981519152910861204051600080516020614ea283398151915290800961164051600080516020614ea2833981519152908009906116e051612040516116405190600080516020614ea2833981519152910990600080516020614ea2833981519152910980600080516020614ea2833981519152910891600080516020614ea28339815191529108600080516020614ea28339815191520390600080516020614ea28339815191529108600080516020614ea2833981519152828009611620516119e05190600080516020614ea283398151915291086120005190600080516020614ea2833981519152910890600080516020614ea2833981519152910990600080516020614ea28339815191529108613480519061176051600080516020614ea283398151915203600080516020614ea283398151915290600108600080516020614ea2833981519152910990600080516020614ea2833981519152910990612020516116405190600080516020614ea2833981519152910861164051600080516020614ea2833981519152036116e0516120405190600080516020614ea2833981519152910990600080516020614ea2833981519152910861162051600080516020614ea2833981519152036120005190600080516020614ea2833981519152910890600080516020614ea2833981519152910991600080516020614ea2833981519152910990600080516020614ea28339815191529108612640516134805190600080516020614ea283398151915291099061176051600080516020614ea283398151915203600080516020614ea283398151915290600108600080516020614ea2833981519152910990600080516020614ea28339815191529109906117e05191600080516020614ea2833981519152910890600080516020614ea283398151915291096136805261162051600080516020614ea283398151915290800961164051600080516020614ea283398151915290800961162051600080516020614ea28339815191526011830890600080516020614ea28339815191529109906004600080516020614ea28339815191529109906009600080516020614ea28339815191529109916003600080516020614ea2833981519152910991600080516020614ea28339815191520390611620516116205190600080516020614ea283398151915291086120005190600080516020614ea2833981519152910890600080516020614ea2833981519152910990600080516020614ea2833981519152910890612020516116405190600080516020614ea2833981519152910861164051600080516020614ea283398151915290800890600080516020614ea28339815191529109600080516020614ea2833981519152039061200051600080516020614ea2833981519152036116205190600080516020614ea28339815191529108600080516020614ea2833981519152910990600080516020614ea283398151915291089061348051600080516020614ea2833981519152910990612640516134805190600080516020614ea28339815191529109600080516020614ea283398151915291099061176051600080516020614ea283398151915291099061176051600080516020614ea28339815191529109906117e05191600080516020614ea2833981519152910890600080516020614ea283398151915291096136805190600080516020614ea2833981519152910861368052613460516134805190600080516020614ea2833981519152910961348052611620516119e05190600080516020614ea28339815191529109612000516116005190600080516020614ea2833981519152910990600080516020614ea283398151915291088061202051600080516020614ea283398151915203611640516116205190600080516020614ea28339815191529109611660516116005190600080516020614ea2833981519152910990600080516020614ea2833981519152910890600080516020614ea2833981519152910868100000000000000000600080516020614ea2833981519152910961204051600080516020614ea283398151915203600080516020614ea2833981519152910890600080516020614ea2833981519152910861174051600080516020614ea283398151915291099068100000000000000000600080516020614ea28339815191529109612000516119e05190600080516020614ea28339815191529109600080516020614ea2833981519152910861172051611660516116405190600080516020614ea28339815191529108600080516020614ea283398151915203600080516020614ea283398151915290830890600080516020614ea28339815191529109906117605190612040516120205190600080516020614ea28339815191529108600080516020614ea2833981519152039061166051600080516020614ea2833981519152910890600080516020614ea2833981519152910890600080516020614ea28339815191529109906117005192600080516020614ea2833981519152910890600080516020614ea2833981519152910890600080516020614ea283398151915291096136c05261200051614000600080516020614ea283398151915291096119e051600080516020614ea28339815191529108614000600080516020614ea2833981519152910961164051600080516020614ea28339815191529108614000600080516020614ea2833981519152910961162051600080516020614ea28339815191529108614000600080516020614ea2833981519152910961160051600080516020614ea2833981519152910861166051600080516020614ea283398151915203600080516020614ea2833981519152910861174051600080516020614ea2833981519152910961202051614000600080516020614ea2833981519152910961200051600080516020614ea28339815191529108614000600080516020614ea283398151915291096119e051600080516020614ea28339815191529108614000600080516020614ea2833981519152910961166051600080516020614ea28339815191529108614000600080516020614ea2833981519152910961164051600080516020614ea2833981519152910861204051600080516020614ea283398151915203600080516020614ea2833981519152910861176051600080516020614ea28339815191529109906117205191600080516020614ea2833981519152910890600080516020614ea283398151915291096136e052612660516116405190600080516020614ea2833981519152910961162051600080516020614ea2833981519152910861266051600080516020614ea2833981519152910961160051600080516020614ea2833981519152910861266051600080516020614ea2833981519152910961178051600080516020614ea283398151915291088061166051600080516020614ea283398151915203600080516020614ea28339815191529108806137405261160051600080516020614ea2833981519152036119e05190600080516020614ea283398151915291089161166051600080516020614ea2833981519152036120405190600080516020614ea2833981519152910891600080516020614ea2833981519152600080516020614ec28339815191528508600080516020614ea283398151915290850992600080516020614ea2833981519152858103600108600080516020614ea2833981519152910983612640519161264051600080516020614ea2833981519152910990600080516020614ea2833981519152910890600080516020614ea2833981519152910990600080516020614ea2833981519152910861372052612660516120205190600080516020614ea2833981519152910961200051600080516020614ea2833981519152910861266051600080516020614ea283398151915291096119e051600080516020614ea2833981519152910861266051600080516020614ea28339815191529109600080516020614ea2833981519152036120405190600080516020614ea283398151915291089161164051600080516020614ea2833981519152036120205190600080516020614ea28339815191529108600080516020614ea2833981519152848103600108600080516020614ea28339815191529109600080516020614ea283398151915285810360010890600080516020614ea2833981519152910991600080516020614ea2833981519152036116605190600080516020614ea28339815191529108600080516020614ea2833981519152600080516020614ec28339815191528208600080516020614ea2833981519152910992600080516020614ea2833981519152600080516020614ec28339815191528208600080516020614ea283398151915291099161264051600080516020614ea2833981519152910990600080516020614ea2833981519152910861264051600080516020614ea2833981519152910990600080516020614ea2833981519152910861264051600080516020614ea2833981519152910990600080516020614ea283398151915291086137005261162051600080516020614ea2833981519152036120005190600080516020614ea2833981519152910861164051600080516020614ea28339815191520391600080516020614ea283398151915203600080516020614ea283398151915290600108600080516020614ea2833981519152910990600080516020614ea28339815191529108611700516137205190600080516020614ea283398151915291099061174051600080516020614ea28339815191529109600080516020614ea28339815191529108611760516137405190600080516020614ea28339815191529109600080516020614ea283398151915291086116e051600080516020614ea283398151915291096117a0516137005190600080516020614ea28339815191529109600080516020614ea283398151915291086136c051600080516020614ea283398151915291086136e051600080516020614ea2833981519152910861180051600080516020614ea2833981519152910961348051600080516020614ea283398151915291096136a052613440516134805190600080516020614ea2833981519152910961348052613780516136a051613680516136605161364051613620516136005190600080516020614ea2833981519152910890600080516020614ea2833981519152910890600080516020614ea2833981519152910890600080516020614ea2833981519152910890600080516020614ea2833981519152910890600080516020614ea283398151915291096137608190526126e0516137a0526137c052610520906102c0016137e0376105606137a020600080516020614ea283398151915281066127005260005260016020536021600020600080516020614ea283398151915290066127205260026020536021600020600080516020614ea283398151915290066127405260036020536021600020600080516020614ea283398151915290066127605260046020536021600020600080516020614ea283398151915290066127805260056020536021600020600080516020614ea283398151915290066127a05260066020536021600020600080516020614ea283398151915290066127c05260076020536021600020600080516020614ea283398151915290066127e05260086020536021600020600080516020614ea283398151915290066128005260096020536021600020600080516020614ea2833981519152900661282052600a6020536021600020600080516020614ea2833981519152900661284052600b6020536021600020600080516020614ea2833981519152900661286052600c6020536021600020600080516020614ea2833981519152900661288052600d6020536021600020600080516020614ea283398151915290066128a052600e6020536021600020600080516020614ea283398151915290066128c052600f6020536021600020600080516020614ea283398151915290066128e05260106020536021600020600080516020614ea283398151915290066129005260116020536021600020600080516020614ea283398151915290066129205260126020536021600020600080516020614ea283398151915290066129405260136020536021600020600080516020614ea283398151915290066129605260146020536021600020600080516020614ea283398151915290066129805260156020536021600020600080516020614ea283398151915290066129a05260166020536021600020600080516020614ea283398151915290066129c05260176020536021600020600080516020614ea283398151915290066129e05260186020536021600020600080516020614ea28339815191529006612a005260196020536021600020600080516020614ea28339815191529006612a2052601a6020536021600020600080516020614ea28339815191529006612a4052601b6020536021600020600080516020614ea28339815191529006612a6052601c6020536021600020600080516020614ea28339815191529006612a8052601d6020536021600020600080516020614ea28339815191529006612aa052601d6020536021600020600080516020614ea28339815191528106612ac0526000526123205160205261230051604052612360516060526123405160805260a0600020600080516020614ea28339815191529006612b00526113c0516113e05182808084800984096003900883828009149161316052602061316001526114005190611420519083808085800985096003900884838009141691600052602052613040516040525a6131a0606060006007604094fa165a6131606080816006604094fa166114405190611460519083808085800985096003900884838009141691600052602052613040516130405190600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa1661148051906114a051908380808580098509600390088483800914169160005260205261304051613040516130405190600080516020614ea2833981519152910990600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa16611200519061122051908380808580098509600390088483800914169160005260205261270051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa16611240519061126051908380808580098509600390088483800914169160005260205261272051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa1661128051906112a051908380808580098509600390088483800914169160005260205261274051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa166112c051906112e051908380808580098509600390088483800914169160005260205261276051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa16611300519061132051908380808580098509600390088483800914169160005260205261278051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa1661134051906113605190838080858009850960039008848380091416916000526020526127a051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa1661138051906113a05190838080858009850960039008848380091416916000526020526127c051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa1661040051906104205190838080858009850960039008848380091416916000526020526127e0516040525a6131a0606060006007604094fa165a6131606080816006604094fa166104405190610460519083808085800985096003900884838009141691600052602052612800516040525a6131a0606060006007604094fa165a6131606080816006604094fa1661048051906104a0519083808085800985096003900884838009141691600052602052612820516040525a6131a0606060006007604094fa165a6131606080816006604094fa166104c051906104e0519083808085800985096003900884838009141691600052602052612840516040525a6131a0606060006007604094fa165a6131606080816006604094fa166105005190610520519083808085800985096003900884838009141691600052602052612860516040525a6131a0606060006007604094fa165a6131606080816006604094fa166105405190610560519083808085800985096003900884838009141691600052602052612880516040525a6131a0606060006007604094fa165a6131606080816006604094fa1661058051906105a05190838080858009850960039008848380091416916000526020526128a0516040525a6131a0606060006007604094fa165a6131606080816006604094fa166105c051906105e05190838080858009850960039008848380091416916000526020526128c0516040525a6131a0606060006007604094fa165a6131606080816006604094fa1661060051906106205190838080858009850960039008848380091416916000526020526128e0516040525a6131a0606060006007604094fa165a6131606080816006604094fa166106405190610660519083808085800985096003900884838009141691600052602052612900516040525a6131a0606060006007604094fa165a6131606080816006604094fa1661068051906106a0519083808085800985096003900884838009141691600052602052612920516040525a6131a0606060006007604094fa165a6131606080816006604094fa166106c051906106e0519083808085800985096003900884838009141691600052602052612940516040525a6131a0606060006007604094fa165a6131606080816006604094fa166107005190610720519083808085800985096003900884838009141691600052602052612960516040525a6131a0606060006007604094fa165a6131606080816006604094fa166107405190610760519083808085800985096003900884838009141691600052602052612980516040525a6131a0606060006007604094fa165a6131606080816006604094fa1661078051906107a05190838080858009850960039008848380091416916000526020526129a051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa166107c051906107e05190838080858009850960039008848380091416916000526020526129c051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa1661080051906108205190838080858009850960039008848380091416916000526020526129e051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa166108405190610860519083808085800985096003900884838009141691600052602052612a0051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa1661088051906108a0519083808085800985096003900884838009141691600052602052612a20516040525a6131a0606060006007604094fa165a6131606080816006604094fa166108c051906108e0519083808085800985096003900884838009141691600052602052612a40516040525a6131a0606060006007604094fa165a6131606080816006604094fa166109005190610920519083808085800985096003900884838009141691600052602052612a60516040525a6131a0606060006007604094fa165a6131606080816006604094fa166109405190610960519083808085800985096003900884838009141691600052602052612a80516040525a6131a0606060006007604094fa165a6131606080816006604094fa1661098051906109a0519083808085800985096003900884838009141691600052602052612aa0516040525a6131a0606060006007604094fa165a6131606080816006604094fa1661160051612b00516119e05190600080516020614ea2833981519152910990600080516020614ea283398151915291086127005190600080516020614ea2833981519152910961162051612b00516120005190600080516020614ea2833981519152910990600080516020614ea283398151915291086127205190600080516020614ea28339815191529109600080516020614ea2833981519152910861164051612b00516120205190600080516020614ea2833981519152910990600080516020614ea283398151915291086127405190600080516020614ea28339815191529109600080516020614ea2833981519152910861166051612b00516120405190600080516020614ea2833981519152910990600080516020614ea283398151915291086127605190600080516020614ea28339815191529109600080516020614ea2833981519152910861168051612b00516120605190600080516020614ea2833981519152910990600080516020614ea283398151915291086127805190600080516020614ea28339815191529109600080516020614ea283398151915291086116a051612b00516120805190600080516020614ea2833981519152910990600080516020614ea283398151915291086127a05190600080516020614ea28339815191529109600080516020614ea283398151915291086116c051612b00516120a05190600080516020614ea2833981519152910990600080516020614ea283398151915291086127c05190600080516020614ea28339815191529109600080516020614ea283398151915291086116e0516127e05190600080516020614ea28339815191529109600080516020614ea28339815191529108611700516128005190600080516020614ea28339815191529109600080516020614ea28339815191529108611720516128205190600080516020614ea28339815191529109600080516020614ea28339815191529108611740516128405190600080516020614ea28339815191529109600080516020614ea28339815191529108611760516128605190600080516020614ea28339815191529109600080516020614ea28339815191529108611780516128805190600080516020614ea28339815191529109600080516020614ea283398151915291086117a0516128a05190600080516020614ea28339815191529109600080516020614ea283398151915291086117c0516128c05190600080516020614ea28339815191529109600080516020614ea283398151915291086117e0516128e05190600080516020614ea28339815191529109600080516020614ea28339815191529108611800516129005190600080516020614ea28339815191529109600080516020614ea28339815191529108611960516129205190600080516020614ea28339815191529109600080516020614ea28339815191529108611980516129405190600080516020614ea28339815191529109600080516020614ea283398151915291086119a0516129605190600080516020614ea28339815191529109600080516020614ea283398151915291086119c0516129805190600080516020614ea28339815191529109600080516020614ea2833981519152910861184051612b00516120c05190600080516020614ea2833981519152910990600080516020614ea283398151915291086129a05190600080516020614ea28339815191529109600080516020614ea2833981519152910861186051612b00516120e05190600080516020614ea2833981519152910990600080516020614ea283398151915291086129c05190600080516020614ea28339815191529109600080516020614ea2833981519152910861188051612b00516121005190600080516020614ea2833981519152910990600080516020614ea283398151915291086129e05190600080516020614ea28339815191529109600080516020614ea283398151915291086118a051612b00516121205190600080516020614ea2833981519152910990600080516020614ea28339815191529108612a005190600080516020614ea28339815191529109600080516020614ea283398151915291086118c051612a205190600080516020614ea28339815191529109600080516020614ea283398151915291086118e051612a405190600080516020614ea28339815191529109600080516020614ea2833981519152910861190051612a605190600080516020614ea28339815191529109600080516020614ea2833981519152910861192051612a805190600080516020614ea28339815191529109600080516020614ea2833981519152910861194051612aa05190600080516020614ea28339815191529109600080516020614ea2833981519152910861376051600080516020614ea2833981519152910860016000526002602052600080516020614ea2833981519152036040525a6131a0606060006007604094fa165a6131606080816006604094fa1661336052612b00516126c0516123005161232051848080848009840960039008858280091491600052602052816040525a6131a0606060006007604094fa165a6131606080816006604094fa169061234051916123605190858080868009860960039008868380091416926000526020526103c05190600080516020614ea283398151915290840990600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a61322060806131606006604094fa1661230051600052612320516020526123405160405261236051606052816080525a604060608160078194fa165a6131e0608060006006604094fa1690613200518303613200526109c0516143ba575b50809150156143a9576133805261322051600052613240516020527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26040527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6080527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60a0526131e05160c0526132005160e052610a005161010052610a205161012052610a405161014052610a605161016052602060006101808160085afa6133a0526000516133c05261336051613380516133c0516133a0511616161561439857600160005260206000f35b6301c47f3b60e21b60005260046000fd5b63f755f36960e01b60005260046000fd5b600080516020614ea2833981519152906135005192613520519085600381808880098809088683800914169360005260205280096040526040606080600060075afa1690613540519161356051918060038180878009870908908380091416916000526020526040600060608160075afa166132205160a0526132405160c05260406132206080606060065afa166131e0516040526132005160605260406131e06080600060065afa168082614285565b633e2529ef60e21b60005260046000fd5b9080600080516020614ea283398151915291099180019190610a26565b909180600080516020614ea28339815191529109918001906109f1565b63374a972f60e01b60005260046000fd5b908598969186959693928535600080516020614ea283398151915211169783863590600080516020614ea28339815191529108998a8301600080516020614ea28339815191529109998301600080516020614ea2833981519152910999600080516020614ea2833981519152910992600080516020614ea28339815191529109926020019290919493946109b2565b60248035016109e05160051b018035602082013560441b01604082013560881b01606082013560cc1b018380608084013560a085013560441b0160c085013560881b0160e085013560cc1b01818061010087013561012088013560441b0161014088013560881b0161016088013560cc1b01966101e06101808201356101a083013560441b016101c083013560881b0191013560cc1b018661350052836135205287613540528061356052109110169310911016166107cf576375d4fa5360e11b60005260046000fd5b61464261462c60405190565b637667dc9b60e01b8152928392600484016101fa565b0390fd5b6101e16101e17f61ae6655f2e50138265be765837827073a92778ab97975e7b5a750c4ab5f92f56101d4565b9061005c91907f22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e556106e07f244cf010c43ca87237d8b00bf9dd50c4c01c7f086bd4e8c920e75251d96f0d2293620200006000820152604060208201527f1bf82deba7d74902c3708cc6e70e61f30512eca95655210e276e5858ce8f58e560408201527f30643640b9f82f90e83b698e5ea6179c7c05542e859533b48b9953a2f536080160608201527f11a06db1f9651b27c9ec8477d003e63995dd692c8440e37c3aac27f7bbed831e60808201527f199ab55229fd67b165fa96b66ffce82544d6d622918b3d4c12b5e2d73326fb4760a08201527f19679148326451008c148a76ca6f7ce6c667c7f962dda54d819bcca9322e04f660c08201527f2fe66d1e0c5f75a1937cfc9a520cc0bdce8896552d9c6c34c486c2b424ec3d5a60e08201527f29d0e9bfa98e63b45584d0cffa8f0517de5a9ef41f84e6409b736d175ebda26e6101008201527f02819a328e04821f79c809f69321ef159c1a80ba11faefcdc44de310c5b53d736101208201527f1ee1aca00ee3986135cf4f138abdf795ee9478e14b293881fd00538d932402876101408201527f1c011130ca8fb7a4015013f5aa9eb597089b039cfc07ce5d3ed8c99eba25dd2b6101608201527f073ea16b4a029df9a7fa50e1c5809c874d488e1a269b73041065426e0a56e27c6101808201527f20fa39daf8432776c3b9158c80a6f00046363992bc755e5ac857e448c067c9376101a08201527f23f8a275449b7aed2e35a468befb286c4985e28a6e39185c89a903fbacb32bee6101c08201527f0acfd1e58d4571c6b53fdbb5a9cd3e3281a59e675a7068225faf5ab699c730086101e08201527f0696ef8a97c6e8cde6b8388508cae7dc93bef9931e72a1f22318ca7ee2c724ef6102008201527f147a0bd701f6582d2264c54211c3df7aea10651461f1244a46d3a05c96bb4ed76102208201527f2abf3b91d66b8ba761c762026373745ddc8f86ae640a398d1fc1f47f91c4c19f6102408201527f061faf6b978eedad57a6fc5f0842244877f87e38664d4186c76eebceacb008626102608201527f28b955aac4c043cbcfde06eee59b44363f96fe0a6fa93b0b36ef07fbe285d4c76102808201527f16e1bbb0a7728dcb7696fdf3361b39510c6a4f83cc2159f5fc65ceb2be0599f96102a08201527f0243b4589c2417479b90bd1513b8334d928e337833d2440ae0e33c8046fbc20b6102c08201527f2bcedf3290cc533a848eda60cab41837358c6cc467eb1132947446727de8ea506102e08201527f01315729d4ef845156a2a05c19b7ca3b0cb9393f04b75f53f6f8ed9da117efae6103008201527f0bb1f455c4b306104e3fa85b1f99cf3b3c89ddc509251b5d73a09dfafbcbe9236103208201527f16d30d4871d67d6d1691697ee4bf5163479e69eb3317b9d3cd141d7b6e396fd86103408201527f1e40dc32df1c3548ca3f1968a4a6f3af22d1ef794af4428ae6a07ccd33af38d96103608201527f28d46cb783a4780478af313cb6a97664406c65b05e2140749107c4924fab87e46103808201527f0dbc767ab85eb4ef258fe775f8d7a23cc360c32d98a3e2929899d81cab3de59b6103a08201527f1d433e1679a4d522726efddd43d10702cff6552ca86190e388aba49fd8c9f6b06103c08201527f1ca746e44e47dffd1ab81612fe4d258adb4245370d3dfc8604b43a1a7e4621676103e08201527f20f0757218768b5acdffdc0cd203936c9ff62eb1319511b0e8517b8728f406646104008201527f0f0eff8d32706825d3f125854cecd4874c4979bfbdc79f82605d0fa199854c696104208201527f0562db677eb1b28ce15e8f2f3da3da5b42969b732ca71bdd97f771708ccedc756104408201527e9ecd8c355ea6ee1c5749183b60868848816a5ad2fc8b7593163803618d7d2a6104608201527f0937d5511e252f19eb13e7c3c3b15dbafcf47c051e50d1487a6ce598c4c42cf36104808201527f2a6ce94411986de39be569b0befd25d5f8cc71de8db99eec3f45c84080279e846104a08201527f06b069940471a92490111d63729f8577c997b0ac53270624e217c5e3d6194e1a6104c08201527f28d1df45294affc859f026077d3b4ec84b3c5c947c6b8a141224dcabd702104c6104e08201527f2906d8db4838fd01c48610545ef04a674efcbaa549d32b4cd2a45c7d93fa84236105008201527f1bf3ed7756692f717393e0de71f9b12e868bb3b907f6c9ece4a05df5db5936816105208201527f2d8564591de291d1d32fe0e6a34130f7f179fe4eb3606667cb56153b0216280d6105408201527f17a9752549051f79cbe5ee6dd69def422a66653466f1fd058219ae1799e2a3a96105608201527f0514188ebade6414bb9096b5180927a13a5d5c7ebf654b91838ef759e8506d196105808201527f2f427ca72d93c9d3418f7d12410ab240010e9482509b8f1f77447da73924e4f86105a08201527f2e5fe2d13129f75a27ec02a05f80f70baecd7ebd271673e7e171e85cce90dd9c6105c08201527f121e8123abf09c1b5aefb1ac2b964a8a35ae5792643b92fedf217d9e4afcd06a6105e08201527f01fe4f915a2c4ba308b274ac4ed4306e9f23fddbcef43c1ee03a4a5da0f7122e6106008201527f188a0d89a00436a83211acab2298dcb673dc8640e4db3bb7325ff282009fa138610620820152600061064082015260006106608201527f260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c16106808201527f0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b06106a08201527f04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe46106c082015201525256fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000130644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000000a2646970667358221220f8b50a2305f187e01908f1cd87025e6ce7dfe6e8b210436521bf8d77e7f3ff7f64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361015610018575b610016600080fd5b005b60003560e01c8063937f6a10146100405763ea50d0e40361000e5761003b6101a7565b61000e565b5061003b61005e565b600091031261005457565b61005c600080fd5b565b503461008f575b610070366004610049565b61008b61007b614646565b6040519182918290815260200190565b0390f35b610097600080fd5b610065565b909182601f830112156100d8575b602082359267ffffffffffffffff84116100cb575b01928284011161005457565b6100d3600080fd5b6100bf565b6100e0600080fd5b6100aa565b909182601f83011215610124575b602082359267ffffffffffffffff8411610117575b01926020830284011161005457565b61011f600080fd5b610108565b61012c600080fd5b6100f3565b9160408383031261019a575b61017c61015d83853567ffffffffffffffff811161018d575b860161009c565b93909460208101359067ffffffffffffffff8211610180575b016100e5565b9091565b610188600080fd5b610176565b610195600080fd5b610156565b6101a2600080fd5b61013d565b346101c7575b6101c46101bb366004610131565b9291909161020d565b50565b6101cf600080fd5b6101ad565b6101e16101e16101e19290565b90565b6101e16103806101d4565b6101e16134006101d4565b90815260408101929161005c9160200152565b505091506102409061021d600090565b506102376102296101e4565b6102316101ef565b90614672565b6103a051925090565b90818103614620577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476024600435018181350661122052816020820135066112005281604082013506611260528160608201350661124052816080820135066112a0528160a082013506611280528160c0820135066112e0528160e0820135066112c05281610100820135066113205281610120820135066113005281610140820135066113605281610160820135066113405281610180820135066113a052816101a08201350661138052816101c0820135066113e052816101e0820135066113c05281610200820135066114205281610220820135066114005281610240820135066114605281610260820135066114405281610280820135066114a052816102a08201350661148052600080516020614ea28339815191526102c08201350661160052600080516020614ea28339815191526102e08201350661162052600080516020614ea28339815191526103008201350661164052600080516020614ea28339815191526103208201350661166052600080516020614ea28339815191526103408201350661168052600080516020614ea2833981519152610360820135066116a052600080516020614ea2833981519152610380820135066116c052600080516020614ea28339815191526103a0820135066116e052600080516020614ea28339815191526103c08201350661170052600080516020614ea28339815191526103e08201350661172052600080516020614ea28339815191526104008201350661174052600080516020614ea28339815191526104208201350661176052600080516020614ea28339815191526104408201350661178052600080516020614ea2833981519152610460820135066117a052600080516020614ea2833981519152610480820135066117c052600080516020614ea28339815191526104a0820135066117e052600080516020614ea28339815191526104c08201350661180052600080516020614ea28339815191526104e08201350661196052600080516020614ea28339815191526105008201350661198052600080516020614ea2833981519152610520820135066119a052600080516020614ea2833981519152610540820135066119c052600080516020614ea28339815191526105608201350661184052600080516020614ea28339815191526105808201350661186052600080516020614ea28339815191526105a08201350661188052600080516020614ea28339815191526105c0820135066118a052600080516020614ea28339815191526105e0820135066118c052600080516020614ea2833981519152610600820135066118e052600080516020614ea28339815191526106208201350661190052600080516020614ea28339815191526106408201350661192052600080516020614ea28339815191526106608201350661194052600080516020614ea2833981519152610680820135066119e052600080516020614ea28339815191526106a08201350661200052600080516020614ea28339815191526106c08201350661202052600080516020614ea28339815191526106e08201350661204052600080516020614ea28339815191526107008201350661206052600080516020614ea28339815191526107208201350661208052600080516020614ea2833981519152610740820135066120a052600080516020614ea2833981519152610760820135066120c052600080516020614ea2833981519152610780820135066120e052600080516020614ea28339815191526107a08201350661210052600080516020614ea28339815191526107c08201350661212052816107e082013506612320528161080082013506612300528161082082013506612360528161084082013506612340526109c051614556575b6103805160e01b6000526103a05160e01b600452600860002061358052602480350160c060206103a0510280836020613580013781846135a08301370160200161358020600080516020614ea28339815191528082068061266052818180096126805261268051096126a0526000526112e0516020526112c051604052611320516060526113005160805260a0600020600080516020614ea283398151915281066126005260005260016020536021600020600080516020614ea283398151915281066126205260005261136051602052611340516040526113a0516060526113805160805260a0600020600080516020614ea283398151915281066126405261264051600080516020614ea283398151915281800961342052600080516020614ea283398151915281613420510961344052600080516020614ea283398151915281613440510961346052613480526000526113e0516020526113c05160405261142051606052611400516080526114605160a0526114405160c0526114a05160e0526114805161010052610120600020600080516020614ea283398151915281066126c0526126e05261260051612620516103c05160019283946001938160206103a051020192600080516020614ea2833981519152600c81600584099209905b8484106144c757505050505050156144b6576130005261302052600080516020614ea28339815191528060016126005108612620510980610380516001905b808210614499575050600080516020614ea28339815191529182916131005280098009613120526126c0518061038051906001915b80831061447c5750613040819052600080516020614ea28339815191529150600080516020614ec2833981519152900861340051600080516020614ea283398151915283818084810394818082816103e0519981808481848d089309809a08900996099481868b0890099309860890096103c05193600080516020614ea28339815191528580099161302051600080516020614ea283398151915282820993600080516020614ea283398151915287860991600080516020614ea28339815191528381600080516020614ec28339815191528808900995600080516020614ea28339815191528761312051900993600080516020614ea2833981519152856020600052602080526020604052818d818b816001810393818c800909090890096060527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff608052600080516020614ea283398151915260a0526020600060c08160055afa1561446b57899486948860005192600080516020614ea28339815191529084099d600080516020614ec283398151915292600080516020614ea283398151915290800990600080516020614ea2833981519152910990600080516020614ea2833981519152910990600080516020614ea28339815191529108600080516020614ea2833981519152910997600080516020614ea28339815191529089099761312051600080516020614ea2833981519152910990600080516020614ea283398151915290820996600080516020614ea283398151915290600080516020614ec28339815191529008600080516020614ea2833981519152910990600080516020614ea283398151915290820993600080516020614ea2833981519152910990600080516020614ea283398151915290820991600080516020614ea28339815191529109613020519080600080516020614ea2833981519152910990600080516020614ea283398151915291096130005190600080516020614ea2833981519152910961306052600080516020614ea283398151915290870961308052600080516020614ea2833981519152910961378052600080516020614ea283398151915283850990600080516020614ea283398151915291096130a0526131005190600080516020614ea2833981519152910961314052600080516020614ea2833981519152910990600080516020614ea283398151915291096130c052612600516126205161190051600080516020614ea2833981519152908309816116205101016118e051600080516020614ea28339815191529084098261160051010190600080516020614ea2833981519152910961194051600080516020614ea28339815191529084098261166051010161192051600080516020614ea28339815191529085098361164051010190600080516020614ea28339815191529109600080516020614ea283398151915291096116a05190600080516020614ea283398151915291096134805190600080516020614ea283398151915291099161198051600080516020614ea28339815191529082098261162051010161196051600080516020614ea28339815191529083098361160051010190600080516020614ea28339815191529109916119c051600080516020614ea283398151915290830981611660510101916119a051600080516020614ea2833981519152910961164051600080516020614ea28339815191529392010109600080516020614ea283398151915291096120805190600080516020614ea283398151915291096134805190600080516020614ea28339815191529109600080516020614ea283398151915203600080516020614ea28339815191529108612640516134805190600080516020614ea283398151915291096134805261306051600080516020614ea2833981519152036120805190600080516020614ea283398151915291086130c05190600080516020614ea283398151915291096134805190600080516020614ea28339815191529109600080516020614ea28339815191529108612640516134805190600080516020614ea28339815191529109613480526116a051600080516020614ea283398151915290600080516020614ec283398151915290086130a05190600080516020614ea283398151915291096134805190600080516020614ea28339815191529109600080516020614ea2833981519152910861360052612640516134805190600080516020614ea2833981519152910961348052611720516126605190600080516020614ea28339815191529109612020516117805190600080516020614ea283398151915291096116405190600080516020614ea28339815191529108600080516020614ea2833981519152910861266051600080516020614ea28339815191529109612000516117605190600080516020614ea283398151915291096116205190600080516020614ea28339815191529108600080516020614ea2833981519152910861266051600080516020614ea283398151915291096119e0516117005190600080516020614ea283398151915291096116005190600080516020614ea28339815191529108600080516020614ea2833981519152910861184051612660516118605190600080516020614ea28339815191529109612680516118805190600080516020614ea283398151915291096126a0516118a05190600080516020614ea2833981519152910990600080516020614ea2833981519152910890600080516020614ea2833981519152910890600080516020614ea28339815191529108906120c051612660516120e05190600080516020614ea28339815191529109612680516121005190600080516020614ea283398151915291096126a0516121205190600080516020614ea2833981519152910990600080516020614ea2833981519152910890600080516020614ea2833981519152910890600080516020614ea2833981519152910890612600516001600080516020614ea283398151915291086126205190600080516020614ea2833981519152910992839161262051906118c051600080516020614ea2833981519152910990600080516020614ea283398151915291089261260051600080516020614ea28339815191529109600080516020614ea2833981519152910890600080516020614ea28339815191529108600080516020614ea28339815191529109612600516001600080516020614ea28339815191529108600080516020614ea283398151915291096130a0516126405190600080516020614ea283398151915291099081600080516020614ea283398151915291086116c051600080516020614ea2833981519152910990600080516020614ea283398151915203600080516020614ea2833981519152910890612600516120605190600080516020614ea283398151915291096116805190600080516020614ea2833981519152910890600080516020614ea283398151915291086130c0516134205190600080516020614ea283398151915291099081600080516020614ea283398151915203600080516020614ea283398151915291086120a051600080516020614ea283398151915291099061314051600080516020614ea28339815191529109600080516020614ea28339815191529108906134805191600080516020614ea283398151915203600080516020614ea2833981519152910890600080516020614ea2833981519152910961362052613440516134805190600080516020614ea28339815191529109613480526116e0516116005190600080516020614ea28339815191529109611700516116205190600080516020614ea28339815191529109611720516116405190600080516020614ea2833981519152910990611740516116605190600080516020614ea28339815191529109926003600080516020614ea2833981519152036117a05190600080516020614ea2833981519152910861176051611620516116005190600080516020614ea2833981519152910990600080516020614ea2833981519152910990600080516020614ea283398151915291097f183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f8000000600080516020614ea28339815191529109600080516020614ea28339815191529108600080516020614ea28339815191529108600080516020614ea28339815191529108600080516020614ea283398151915291086117805190600080516020614ea28339815191529108611660516116005190600080516020614ea283398151915291086119e051600080516020614ea28339815191520390600080516020614ea283398151915291086117605190600080516020614ea283398151915291086117a051600080516020614ea2833981519152907f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff900890600080516020614ea283398151915291096126405190600080516020614ea283398151915291096120405190600080516020614ea283398151915291086117a051600080516020614ea283398151915290600080516020614ec2833981519152900890600080516020614ea28339815191529109600080516020614ea283398151915291086117a05190600080516020614ea283398151915291096134805190600080516020614ea2833981519152910961364052613420516134805190600080516020614ea283398151915291096134805261160051611620517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff917f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593effffffe91600080516020614ea283398151915291820390089161162051600080516020614ea2833981519152036116405190600080516020614ea2833981519152910861164051600080516020614ea2833981519152036116605190600080516020614ea283398151915291089061166051600080516020614ea2833981519152036119e05190600080516020614ea28339815191529108946134805190600080516020614ea283398151915286820890600080516020614ea283398151915286820890600080516020614ea283398151915281810391800990600080516020614ea2833981519152910890600080516020614ea2833981519152910990600080516020614ea2833981519152910990600080516020614ea2833981519152910990612640516134805190600080516020614ea2833981519152910990600080516020614ea283398151915286820890600080516020614ea283398151915286820890600080516020614ea283398151915281810391800990600080516020614ea2833981519152910890600080516020614ea2833981519152910990600080516020614ea2833981519152910990600080516020614ea28339815191529109600080516020614ea2833981519152910890613420516134805190600080516020614ea2833981519152910990600080516020614ea283398151915285820890600080516020614ea283398151915285820890600080516020614ea283398151915281810391800990600080516020614ea2833981519152910890600080516020614ea2833981519152910990600080516020614ea2833981519152910990600080516020614ea28339815191529109600080516020614ea2833981519152910892613440516134805190600080516020614ea2833981519152910992600080516020614ea283398151915290820891600080516020614ea283398151915290820890600080516020614ea283398151915281810391800990600080516020614ea2833981519152910890600080516020614ea2833981519152910990600080516020614ea2833981519152910990600080516020614ea28339815191529109600080516020614ea283398151915291086117c051600080516020614ea2833981519152910961366052613460516134805190600080516020614ea283398151915291096134805261162051600080516020614ea2833981519152036119e05190600080516020614ea2833981519152910861204051600080516020614ea283398151915290800961164051600080516020614ea2833981519152908009906116e051612040516116405190600080516020614ea2833981519152910990600080516020614ea2833981519152910980600080516020614ea2833981519152910891600080516020614ea28339815191529108600080516020614ea28339815191520390600080516020614ea28339815191529108600080516020614ea2833981519152828009611620516119e05190600080516020614ea283398151915291086120005190600080516020614ea2833981519152910890600080516020614ea2833981519152910990600080516020614ea28339815191529108613480519061176051600080516020614ea283398151915203600080516020614ea283398151915290600108600080516020614ea2833981519152910990600080516020614ea2833981519152910990612020516116405190600080516020614ea2833981519152910861164051600080516020614ea2833981519152036116e0516120405190600080516020614ea2833981519152910990600080516020614ea2833981519152910861162051600080516020614ea2833981519152036120005190600080516020614ea2833981519152910890600080516020614ea2833981519152910991600080516020614ea2833981519152910990600080516020614ea28339815191529108612640516134805190600080516020614ea283398151915291099061176051600080516020614ea283398151915203600080516020614ea283398151915290600108600080516020614ea2833981519152910990600080516020614ea28339815191529109906117e05191600080516020614ea2833981519152910890600080516020614ea283398151915291096136805261162051600080516020614ea283398151915290800961164051600080516020614ea283398151915290800961162051600080516020614ea28339815191526011830890600080516020614ea28339815191529109906004600080516020614ea28339815191529109906009600080516020614ea28339815191529109916003600080516020614ea2833981519152910991600080516020614ea28339815191520390611620516116205190600080516020614ea283398151915291086120005190600080516020614ea2833981519152910890600080516020614ea2833981519152910990600080516020614ea2833981519152910890612020516116405190600080516020614ea2833981519152910861164051600080516020614ea283398151915290800890600080516020614ea28339815191529109600080516020614ea2833981519152039061200051600080516020614ea2833981519152036116205190600080516020614ea28339815191529108600080516020614ea2833981519152910990600080516020614ea283398151915291089061348051600080516020614ea2833981519152910990612640516134805190600080516020614ea28339815191529109600080516020614ea283398151915291099061176051600080516020614ea283398151915291099061176051600080516020614ea28339815191529109906117e05191600080516020614ea2833981519152910890600080516020614ea283398151915291096136805190600080516020614ea2833981519152910861368052613460516134805190600080516020614ea2833981519152910961348052611620516119e05190600080516020614ea28339815191529109612000516116005190600080516020614ea2833981519152910990600080516020614ea283398151915291088061202051600080516020614ea283398151915203611640516116205190600080516020614ea28339815191529109611660516116005190600080516020614ea2833981519152910990600080516020614ea2833981519152910890600080516020614ea2833981519152910868100000000000000000600080516020614ea2833981519152910961204051600080516020614ea283398151915203600080516020614ea2833981519152910890600080516020614ea2833981519152910861174051600080516020614ea283398151915291099068100000000000000000600080516020614ea28339815191529109612000516119e05190600080516020614ea28339815191529109600080516020614ea2833981519152910861172051611660516116405190600080516020614ea28339815191529108600080516020614ea283398151915203600080516020614ea283398151915290830890600080516020614ea28339815191529109906117605190612040516120205190600080516020614ea28339815191529108600080516020614ea2833981519152039061166051600080516020614ea2833981519152910890600080516020614ea2833981519152910890600080516020614ea28339815191529109906117005192600080516020614ea2833981519152910890600080516020614ea2833981519152910890600080516020614ea283398151915291096136c05261200051614000600080516020614ea283398151915291096119e051600080516020614ea28339815191529108614000600080516020614ea2833981519152910961164051600080516020614ea28339815191529108614000600080516020614ea2833981519152910961162051600080516020614ea28339815191529108614000600080516020614ea2833981519152910961160051600080516020614ea2833981519152910861166051600080516020614ea283398151915203600080516020614ea2833981519152910861174051600080516020614ea2833981519152910961202051614000600080516020614ea2833981519152910961200051600080516020614ea28339815191529108614000600080516020614ea283398151915291096119e051600080516020614ea28339815191529108614000600080516020614ea2833981519152910961166051600080516020614ea28339815191529108614000600080516020614ea2833981519152910961164051600080516020614ea2833981519152910861204051600080516020614ea283398151915203600080516020614ea2833981519152910861176051600080516020614ea28339815191529109906117205191600080516020614ea2833981519152910890600080516020614ea283398151915291096136e052612660516116405190600080516020614ea2833981519152910961162051600080516020614ea2833981519152910861266051600080516020614ea2833981519152910961160051600080516020614ea2833981519152910861266051600080516020614ea2833981519152910961178051600080516020614ea283398151915291088061166051600080516020614ea283398151915203600080516020614ea28339815191529108806137405261160051600080516020614ea2833981519152036119e05190600080516020614ea283398151915291089161166051600080516020614ea2833981519152036120405190600080516020614ea2833981519152910891600080516020614ea2833981519152600080516020614ec28339815191528508600080516020614ea283398151915290850992600080516020614ea2833981519152858103600108600080516020614ea2833981519152910983612640519161264051600080516020614ea2833981519152910990600080516020614ea2833981519152910890600080516020614ea2833981519152910990600080516020614ea2833981519152910861372052612660516120205190600080516020614ea2833981519152910961200051600080516020614ea2833981519152910861266051600080516020614ea283398151915291096119e051600080516020614ea2833981519152910861266051600080516020614ea28339815191529109600080516020614ea2833981519152036120405190600080516020614ea283398151915291089161164051600080516020614ea2833981519152036120205190600080516020614ea28339815191529108600080516020614ea2833981519152848103600108600080516020614ea28339815191529109600080516020614ea283398151915285810360010890600080516020614ea2833981519152910991600080516020614ea2833981519152036116605190600080516020614ea28339815191529108600080516020614ea2833981519152600080516020614ec28339815191528208600080516020614ea2833981519152910992600080516020614ea2833981519152600080516020614ec28339815191528208600080516020614ea283398151915291099161264051600080516020614ea2833981519152910990600080516020614ea2833981519152910861264051600080516020614ea2833981519152910990600080516020614ea2833981519152910861264051600080516020614ea2833981519152910990600080516020614ea283398151915291086137005261162051600080516020614ea2833981519152036120005190600080516020614ea2833981519152910861164051600080516020614ea28339815191520391600080516020614ea283398151915203600080516020614ea283398151915290600108600080516020614ea2833981519152910990600080516020614ea28339815191529108611700516137205190600080516020614ea283398151915291099061174051600080516020614ea28339815191529109600080516020614ea28339815191529108611760516137405190600080516020614ea28339815191529109600080516020614ea283398151915291086116e051600080516020614ea283398151915291096117a0516137005190600080516020614ea28339815191529109600080516020614ea283398151915291086136c051600080516020614ea283398151915291086136e051600080516020614ea2833981519152910861180051600080516020614ea2833981519152910961348051600080516020614ea283398151915291096136a052613440516134805190600080516020614ea2833981519152910961348052613780516136a051613680516136605161364051613620516136005190600080516020614ea2833981519152910890600080516020614ea2833981519152910890600080516020614ea2833981519152910890600080516020614ea2833981519152910890600080516020614ea2833981519152910890600080516020614ea283398151915291096137608190526126e0516137a0526137c052610520906102c0016137e0376105606137a020600080516020614ea283398151915281066127005260005260016020536021600020600080516020614ea283398151915290066127205260026020536021600020600080516020614ea283398151915290066127405260036020536021600020600080516020614ea283398151915290066127605260046020536021600020600080516020614ea283398151915290066127805260056020536021600020600080516020614ea283398151915290066127a05260066020536021600020600080516020614ea283398151915290066127c05260076020536021600020600080516020614ea283398151915290066127e05260086020536021600020600080516020614ea283398151915290066128005260096020536021600020600080516020614ea2833981519152900661282052600a6020536021600020600080516020614ea2833981519152900661284052600b6020536021600020600080516020614ea2833981519152900661286052600c6020536021600020600080516020614ea2833981519152900661288052600d6020536021600020600080516020614ea283398151915290066128a052600e6020536021600020600080516020614ea283398151915290066128c052600f6020536021600020600080516020614ea283398151915290066128e05260106020536021600020600080516020614ea283398151915290066129005260116020536021600020600080516020614ea283398151915290066129205260126020536021600020600080516020614ea283398151915290066129405260136020536021600020600080516020614ea283398151915290066129605260146020536021600020600080516020614ea283398151915290066129805260156020536021600020600080516020614ea283398151915290066129a05260166020536021600020600080516020614ea283398151915290066129c05260176020536021600020600080516020614ea283398151915290066129e05260186020536021600020600080516020614ea28339815191529006612a005260196020536021600020600080516020614ea28339815191529006612a2052601a6020536021600020600080516020614ea28339815191529006612a4052601b6020536021600020600080516020614ea28339815191529006612a6052601c6020536021600020600080516020614ea28339815191529006612a8052601d6020536021600020600080516020614ea28339815191529006612aa052601d6020536021600020600080516020614ea28339815191528106612ac0526000526123205160205261230051604052612360516060526123405160805260a0600020600080516020614ea28339815191529006612b00526113c0516113e05182808084800984096003900883828009149161316052602061316001526114005190611420519083808085800985096003900884838009141691600052602052613040516040525a6131a0606060006007604094fa165a6131606080816006604094fa166114405190611460519083808085800985096003900884838009141691600052602052613040516130405190600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa1661148051906114a051908380808580098509600390088483800914169160005260205261304051613040516130405190600080516020614ea2833981519152910990600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa16611200519061122051908380808580098509600390088483800914169160005260205261270051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa16611240519061126051908380808580098509600390088483800914169160005260205261272051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa1661128051906112a051908380808580098509600390088483800914169160005260205261274051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa166112c051906112e051908380808580098509600390088483800914169160005260205261276051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa16611300519061132051908380808580098509600390088483800914169160005260205261278051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa1661134051906113605190838080858009850960039008848380091416916000526020526127a051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa1661138051906113a05190838080858009850960039008848380091416916000526020526127c051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa1661040051906104205190838080858009850960039008848380091416916000526020526127e0516040525a6131a0606060006007604094fa165a6131606080816006604094fa166104405190610460519083808085800985096003900884838009141691600052602052612800516040525a6131a0606060006007604094fa165a6131606080816006604094fa1661048051906104a0519083808085800985096003900884838009141691600052602052612820516040525a6131a0606060006007604094fa165a6131606080816006604094fa166104c051906104e0519083808085800985096003900884838009141691600052602052612840516040525a6131a0606060006007604094fa165a6131606080816006604094fa166105005190610520519083808085800985096003900884838009141691600052602052612860516040525a6131a0606060006007604094fa165a6131606080816006604094fa166105405190610560519083808085800985096003900884838009141691600052602052612880516040525a6131a0606060006007604094fa165a6131606080816006604094fa1661058051906105a05190838080858009850960039008848380091416916000526020526128a0516040525a6131a0606060006007604094fa165a6131606080816006604094fa166105c051906105e05190838080858009850960039008848380091416916000526020526128c0516040525a6131a0606060006007604094fa165a6131606080816006604094fa1661060051906106205190838080858009850960039008848380091416916000526020526128e0516040525a6131a0606060006007604094fa165a6131606080816006604094fa166106405190610660519083808085800985096003900884838009141691600052602052612900516040525a6131a0606060006007604094fa165a6131606080816006604094fa1661068051906106a0519083808085800985096003900884838009141691600052602052612920516040525a6131a0606060006007604094fa165a6131606080816006604094fa166106c051906106e0519083808085800985096003900884838009141691600052602052612940516040525a6131a0606060006007604094fa165a6131606080816006604094fa166107005190610720519083808085800985096003900884838009141691600052602052612960516040525a6131a0606060006007604094fa165a6131606080816006604094fa166107405190610760519083808085800985096003900884838009141691600052602052612980516040525a6131a0606060006007604094fa165a6131606080816006604094fa1661078051906107a05190838080858009850960039008848380091416916000526020526129a051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa166107c051906107e05190838080858009850960039008848380091416916000526020526129c051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa1661080051906108205190838080858009850960039008848380091416916000526020526129e051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa166108405190610860519083808085800985096003900884838009141691600052602052612a0051612b00516001600080516020614ea2833981519152910890600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a6131606080816006604094fa1661088051906108a0519083808085800985096003900884838009141691600052602052612a20516040525a6131a0606060006007604094fa165a6131606080816006604094fa166108c051906108e0519083808085800985096003900884838009141691600052602052612a40516040525a6131a0606060006007604094fa165a6131606080816006604094fa166109005190610920519083808085800985096003900884838009141691600052602052612a60516040525a6131a0606060006007604094fa165a6131606080816006604094fa166109405190610960519083808085800985096003900884838009141691600052602052612a80516040525a6131a0606060006007604094fa165a6131606080816006604094fa1661098051906109a0519083808085800985096003900884838009141691600052602052612aa0516040525a6131a0606060006007604094fa165a6131606080816006604094fa1661160051612b00516119e05190600080516020614ea2833981519152910990600080516020614ea283398151915291086127005190600080516020614ea2833981519152910961162051612b00516120005190600080516020614ea2833981519152910990600080516020614ea283398151915291086127205190600080516020614ea28339815191529109600080516020614ea2833981519152910861164051612b00516120205190600080516020614ea2833981519152910990600080516020614ea283398151915291086127405190600080516020614ea28339815191529109600080516020614ea2833981519152910861166051612b00516120405190600080516020614ea2833981519152910990600080516020614ea283398151915291086127605190600080516020614ea28339815191529109600080516020614ea2833981519152910861168051612b00516120605190600080516020614ea2833981519152910990600080516020614ea283398151915291086127805190600080516020614ea28339815191529109600080516020614ea283398151915291086116a051612b00516120805190600080516020614ea2833981519152910990600080516020614ea283398151915291086127a05190600080516020614ea28339815191529109600080516020614ea283398151915291086116c051612b00516120a05190600080516020614ea2833981519152910990600080516020614ea283398151915291086127c05190600080516020614ea28339815191529109600080516020614ea283398151915291086116e0516127e05190600080516020614ea28339815191529109600080516020614ea28339815191529108611700516128005190600080516020614ea28339815191529109600080516020614ea28339815191529108611720516128205190600080516020614ea28339815191529109600080516020614ea28339815191529108611740516128405190600080516020614ea28339815191529109600080516020614ea28339815191529108611760516128605190600080516020614ea28339815191529109600080516020614ea28339815191529108611780516128805190600080516020614ea28339815191529109600080516020614ea283398151915291086117a0516128a05190600080516020614ea28339815191529109600080516020614ea283398151915291086117c0516128c05190600080516020614ea28339815191529109600080516020614ea283398151915291086117e0516128e05190600080516020614ea28339815191529109600080516020614ea28339815191529108611800516129005190600080516020614ea28339815191529109600080516020614ea28339815191529108611960516129205190600080516020614ea28339815191529109600080516020614ea28339815191529108611980516129405190600080516020614ea28339815191529109600080516020614ea283398151915291086119a0516129605190600080516020614ea28339815191529109600080516020614ea283398151915291086119c0516129805190600080516020614ea28339815191529109600080516020614ea2833981519152910861184051612b00516120c05190600080516020614ea2833981519152910990600080516020614ea283398151915291086129a05190600080516020614ea28339815191529109600080516020614ea2833981519152910861186051612b00516120e05190600080516020614ea2833981519152910990600080516020614ea283398151915291086129c05190600080516020614ea28339815191529109600080516020614ea2833981519152910861188051612b00516121005190600080516020614ea2833981519152910990600080516020614ea283398151915291086129e05190600080516020614ea28339815191529109600080516020614ea283398151915291086118a051612b00516121205190600080516020614ea2833981519152910990600080516020614ea28339815191529108612a005190600080516020614ea28339815191529109600080516020614ea283398151915291086118c051612a205190600080516020614ea28339815191529109600080516020614ea283398151915291086118e051612a405190600080516020614ea28339815191529109600080516020614ea2833981519152910861190051612a605190600080516020614ea28339815191529109600080516020614ea2833981519152910861192051612a805190600080516020614ea28339815191529109600080516020614ea2833981519152910861194051612aa05190600080516020614ea28339815191529109600080516020614ea2833981519152910861376051600080516020614ea2833981519152910860016000526002602052600080516020614ea2833981519152036040525a6131a0606060006007604094fa165a6131606080816006604094fa1661336052612b00516126c0516123005161232051848080848009840960039008858280091491600052602052816040525a6131a0606060006007604094fa165a6131606080816006604094fa169061234051916123605190858080868009860960039008868380091416926000526020526103c05190600080516020614ea283398151915290840990600080516020614ea283398151915291096040525a6131a0606060006007604094fa165a61322060806131606006604094fa1661230051600052612320516020526123405160405261236051606052816080525a604060608160078194fa165a6131e0608060006006604094fa1690613200518303613200526109c0516143ba575b50809150156143a9576133805261322051600052613240516020527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26040527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6080527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60a0526131e05160c0526132005160e052610a005161010052610a205161012052610a405161014052610a605161016052602060006101808160085afa6133a0526000516133c05261336051613380516133c0516133a0511616161561439857600160005260206000f35b6301c47f3b60e21b60005260046000fd5b63f755f36960e01b60005260046000fd5b600080516020614ea2833981519152906135005192613520519085600381808880098809088683800914169360005260205280096040526040606080600060075afa1690613540519161356051918060038180878009870908908380091416916000526020526040600060608160075afa166132205160a0526132405160c05260406132206080606060065afa166131e0516040526132005160605260406131e06080600060065afa168082614285565b633e2529ef60e21b60005260046000fd5b9080600080516020614ea283398151915291099180019190610a26565b909180600080516020614ea28339815191529109918001906109f1565b63374a972f60e01b60005260046000fd5b908598969186959693928535600080516020614ea283398151915211169783863590600080516020614ea28339815191529108998a8301600080516020614ea28339815191529109998301600080516020614ea2833981519152910999600080516020614ea2833981519152910992600080516020614ea28339815191529109926020019290919493946109b2565b60248035016109e05160051b018035602082013560441b01604082013560881b01606082013560cc1b018380608084013560a085013560441b0160c085013560881b0160e085013560cc1b01818061010087013561012088013560441b0161014088013560881b0161016088013560cc1b01966101e06101808201356101a083013560441b016101c083013560881b0191013560cc1b018661350052836135205287613540528061356052109110169310911016166107cf576375d4fa5360e11b60005260046000fd5b61464261462c60405190565b637667dc9b60e01b8152928392600484016101fa565b0390fd5b6101e16101e17f61ae6655f2e50138265be765837827073a92778ab97975e7b5a750c4ab5f92f56101d4565b9061005c91907f22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e556106e07f244cf010c43ca87237d8b00bf9dd50c4c01c7f086bd4e8c920e75251d96f0d2293620200006000820152604060208201527f1bf82deba7d74902c3708cc6e70e61f30512eca95655210e276e5858ce8f58e560408201527f30643640b9f82f90e83b698e5ea6179c7c05542e859533b48b9953a2f536080160608201527f11a06db1f9651b27c9ec8477d003e63995dd692c8440e37c3aac27f7bbed831e60808201527f199ab55229fd67b165fa96b66ffce82544d6d622918b3d4c12b5e2d73326fb4760a08201527f19679148326451008c148a76ca6f7ce6c667c7f962dda54d819bcca9322e04f660c08201527f2fe66d1e0c5f75a1937cfc9a520cc0bdce8896552d9c6c34c486c2b424ec3d5a60e08201527f29d0e9bfa98e63b45584d0cffa8f0517de5a9ef41f84e6409b736d175ebda26e6101008201527f02819a328e04821f79c809f69321ef159c1a80ba11faefcdc44de310c5b53d736101208201527f1ee1aca00ee3986135cf4f138abdf795ee9478e14b293881fd00538d932402876101408201527f1c011130ca8fb7a4015013f5aa9eb597089b039cfc07ce5d3ed8c99eba25dd2b6101608201527f073ea16b4a029df9a7fa50e1c5809c874d488e1a269b73041065426e0a56e27c6101808201527f20fa39daf8432776c3b9158c80a6f00046363992bc755e5ac857e448c067c9376101a08201527f23f8a275449b7aed2e35a468befb286c4985e28a6e39185c89a903fbacb32bee6101c08201527f0acfd1e58d4571c6b53fdbb5a9cd3e3281a59e675a7068225faf5ab699c730086101e08201527f0696ef8a97c6e8cde6b8388508cae7dc93bef9931e72a1f22318ca7ee2c724ef6102008201527f147a0bd701f6582d2264c54211c3df7aea10651461f1244a46d3a05c96bb4ed76102208201527f2abf3b91d66b8ba761c762026373745ddc8f86ae640a398d1fc1f47f91c4c19f6102408201527f061faf6b978eedad57a6fc5f0842244877f87e38664d4186c76eebceacb008626102608201527f28b955aac4c043cbcfde06eee59b44363f96fe0a6fa93b0b36ef07fbe285d4c76102808201527f16e1bbb0a7728dcb7696fdf3361b39510c6a4f83cc2159f5fc65ceb2be0599f96102a08201527f0243b4589c2417479b90bd1513b8334d928e337833d2440ae0e33c8046fbc20b6102c08201527f2bcedf3290cc533a848eda60cab41837358c6cc467eb1132947446727de8ea506102e08201527f01315729d4ef845156a2a05c19b7ca3b0cb9393f04b75f53f6f8ed9da117efae6103008201527f0bb1f455c4b306104e3fa85b1f99cf3b3c89ddc509251b5d73a09dfafbcbe9236103208201527f16d30d4871d67d6d1691697ee4bf5163479e69eb3317b9d3cd141d7b6e396fd86103408201527f1e40dc32df1c3548ca3f1968a4a6f3af22d1ef794af4428ae6a07ccd33af38d96103608201527f28d46cb783a4780478af313cb6a97664406c65b05e2140749107c4924fab87e46103808201527f0dbc767ab85eb4ef258fe775f8d7a23cc360c32d98a3e2929899d81cab3de59b6103a08201527f1d433e1679a4d522726efddd43d10702cff6552ca86190e388aba49fd8c9f6b06103c08201527f1ca746e44e47dffd1ab81612fe4d258adb4245370d3dfc8604b43a1a7e4621676103e08201527f20f0757218768b5acdffdc0cd203936c9ff62eb1319511b0e8517b8728f406646104008201527f0f0eff8d32706825d3f125854cecd4874c4979bfbdc79f82605d0fa199854c696104208201527f0562db677eb1b28ce15e8f2f3da3da5b42969b732ca71bdd97f771708ccedc756104408201527e9ecd8c355ea6ee1c5749183b60868848816a5ad2fc8b7593163803618d7d2a6104608201527f0937d5511e252f19eb13e7c3c3b15dbafcf47c051e50d1487a6ce598c4c42cf36104808201527f2a6ce94411986de39be569b0befd25d5f8cc71de8db99eec3f45c84080279e846104a08201527f06b069940471a92490111d63729f8577c997b0ac53270624e217c5e3d6194e1a6104c08201527f28d1df45294affc859f026077d3b4ec84b3c5c947c6b8a141224dcabd702104c6104e08201527f2906d8db4838fd01c48610545ef04a674efcbaa549d32b4cd2a45c7d93fa84236105008201527f1bf3ed7756692f717393e0de71f9b12e868bb3b907f6c9ece4a05df5db5936816105208201527f2d8564591de291d1d32fe0e6a34130f7f179fe4eb3606667cb56153b0216280d6105408201527f17a9752549051f79cbe5ee6dd69def422a66653466f1fd058219ae1799e2a3a96105608201527f0514188ebade6414bb9096b5180927a13a5d5c7ebf654b91838ef759e8506d196105808201527f2f427ca72d93c9d3418f7d12410ab240010e9482509b8f1f77447da73924e4f86105a08201527f2e5fe2d13129f75a27ec02a05f80f70baecd7ebd271673e7e171e85cce90dd9c6105c08201527f121e8123abf09c1b5aefb1ac2b964a8a35ae5792643b92fedf217d9e4afcd06a6105e08201527f01fe4f915a2c4ba308b274ac4ed4306e9f23fddbcef43c1ee03a4a5da0f7122e6106008201527f188a0d89a00436a83211acab2298dcb673dc8640e4db3bb7325ff282009fa138610620820152600061064082015260006106608201527f260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c16106808201527f0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b06106a08201527f04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe46106c082015201525256fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000130644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000000a2646970667358221220f8b50a2305f187e01908f1cd87025e6ce7dfe6e8b210436521bf8d77e7f3ff7f64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verify(bytes,bytes32[])": {
        "params": {
          "_proof": "- The serialized proof",
          "_publicInputs": "- An array of the public inputs"
        },
        "returns": {
          "_0": "True if proof is valid, reverts otherwise"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "verify(bytes,bytes32[])": {
        "notice": "Verify a Ultra Plonk proof"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}